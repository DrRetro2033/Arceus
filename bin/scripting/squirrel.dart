import 'dart:ffi';
import 'dart:io' show Platform;
import 'package:ffi/ffi.dart' as ffi;
import 'package:talker/talker.dart';
import '../extensions.dart';

import 'squirrel_bindings_generated.dart';

DynamicLibrary _getDylib(String path) {
  if (Platform.isMacOS) {
    throw Exception("MacOS is not supported yet.");
  } else if (Platform.isLinux) {
    return DynamicLibrary.open("$path/squirrel.so");
  } else if (Platform.isWindows) {
    return DynamicLibrary.open("$path/squirrel.dll");
  }
  throw Exception("Unsupported platform.");
}

Pointer<NativeFunction<Void Function(Pointer<SQVM>, Pointer<Char>)>>
    printSquirl = Pointer.fromFunction(_printSquirl);
void _printSquirl(Pointer<SQVM> vm, Pointer<Char> s) {
  print(s.toDartString());
  return;
}

class Squirrel {
  /// # `static` Talker talker
  /// ## The logger for the Duktape instance.
  static Talker talker = Talker();

  /// # `late` DuktapeBindings bindings
  /// ## The bindings for the Duktape instance.
  /// Generated by ffigen.
  static late SquirrelBindings bindings;

  /// # `static` bool isInitialized
  /// ## A flag to check if Duktape has been initialized and can be used.
  static bool isInitialized = false;

  /// # `static` void init(String pathToLibraries)
  /// ## Initializes the Squirrel libraries.
  static init(String pathToLibraries) {
    bindings = SquirrelBindings(_getDylib(pathToLibraries));
    isInitialized = true;
  }

  /// # `static` Pointer<SQVM> start(String filename, String code)
  /// ## Compiles code and starts the Squirrel instance.
  static Pointer<SQVM> run(String code) {
    if (!isInitialized) {
      throw Exception("Squirrel is not initialized.");
    }
    final vm = bindings.sq_open(1024);
    bindings.sq_setprintfunc(vm, printSquirl, printSquirl);
    successful(
        vm,
        bindings.sq_compilebuffer(vm, code.toCharPointer(),
            code.toNativeUtf8().length, "run.nut".toCharPointer(), SQTrue));
    bindings.sq_pushroottable(vm);
    successful(vm, bindings.sq_call(vm, 1, SQFalse, SQTrue));
    bindings.sq_pop(vm, 1);
    return vm;
  }

  static void dispose(Pointer<SQVM> vm) {
    bindings.sq_close(vm);
  }

  /// # `void` _createAPI(List<SquirrelFunction> apiFunctions)
  /// ## Creates the API for the Squirrel instance.
  /// It takes a list of [SquirrelFunction] objects and adds them to the global scope of the Duktape instance.
  static void createAPI(Pointer<SQVM> vm, List<SquirrelFunction> apiFunctions) {
    for (SquirrelFunction func in apiFunctions) {
      bindings.sq_pushroottable(vm);
      bindings.sq_pushstring(
          vm, func.name.toCharPointer(), func.name.toNativeUtf8().length);
      bindings.sq_newclosure(
          vm,
          NativeCallable<LongLong Function(Pointer<SQVM> ctx)>.isolateLocal(
                  func.call,
                  exceptionalReturn: 0)
              .nativeFunction,
          0);
      bindings.sq_newslot(vm, -3, SQFalse);
      bindings.sq_pop(vm, 1);
    }
  }

  /// # `static` void successful(Pointer<SQVM> vm, int result)
  /// ## Throws an exception if the result is not 0.
  /// It will also print the stack of the Squirrel instance.
  static void successful(Pointer<SQVM> vm, int result) {
    if (result != 0) {
      bindings.sq_getlasterror(vm);
      final error = getValueFromStack(vm);
      throw Exception("$error \n ${getStack(vm)}");
    }
  }

  /// # `static` void printStack(Pointer<SQVM> vm)
  /// ## Prints the stack of the Squirrel instance.
  static List<String> getStack(Pointer<SQVM> vm) {
    List<String> stack = [];
    int i = bindings.sq_gettop(vm);
    while (i > 0) {
      bindings.sq_tostring(vm, i);
      final p = ffi.calloc<Pointer<Char>>();
      bindings.sq_getstring(vm, -1, p);
      stack.add(p.value.toDartString());
      ffi.calloc.free(p);
      bindings.sq_pop(vm, 1);
      i--;
    }
    return stack;
  }

  /// # `static` dynamic call(String functionName, [List<dynamic> args = const []])
  /// ## Calls a function in the Squirrel instance.
  /// Will return the return value of the function, if any.
  static dynamic call(Pointer<SQVM> vm, String functionName,
      [List<dynamic> args = const []]) {
    bindings.sq_pushroottable(vm);
    bindings.sq_pushstring(
        vm, functionName.toCharPointer(), functionName.length);
    bindings.sq_get(vm, -2);
    bindings.sq_pushroottable(vm);
    for (dynamic arg in args) {
      // Pushes the arguments to the stack.
      if (arg is String) {
        bindings.sq_pushstring(vm, arg.toCharPointer(), arg.length);
      } else if (arg is int) {
        bindings.sq_pushinteger(vm, arg);
      } else if (arg is double) {
        bindings.sq_pushfloat(vm, arg);
      } else if (arg is bool) {
        bindings.sq_pushbool(vm, arg ? 1 : 0);
      } else {
        bindings.sq_pushnull(vm);
      }
    }
    successful(vm, bindings.sq_call(vm, args.length + 1, SQTrue, SQTrue));
    final returnValue = getValueFromStack(vm);
    bindings.sq_pop(vm, 2); // Pops the function and the root table.
    return returnValue;
  }

  static dynamic getValueFromStack(HSQUIRRELVM vm,
      {tagSQObjectType? expectedType, int index = -1, bool noPop = false}) {
    final result = bindings.sq_gettype(vm, index);
    dynamic value;
    if (expectedType != null && result != expectedType) {
      throw Exception("Expected type $expectedType but got $result.");
    } else {
      // print("Type: $result");
    }

    if (result == tagSQObjectType.OT_STRING) {
      final p = ffi.calloc<Pointer<Char>>();
      try {
        bindings.sq_getstring(
            vm, index, p); // pass along the pointer to get the value.
        value = p.value.toDartString();
      } finally {
        ffi.calloc.free(p); // free memory
      }
    } else if (result == tagSQObjectType.OT_INTEGER) {
      final p = ffi.calloc<LongLong>();
      try {
        bindings.sq_getinteger(vm, index, p);
        value = p.value;
      } finally {
        ffi.calloc.free(p);
      }
    } else if (result == tagSQObjectType.OT_FLOAT) {
      final p = ffi.calloc<Float>();
      try {
        bindings.sq_getfloat(vm, index, p);
        value = p.value;
      } finally {
        ffi.calloc.free(p);
      }
    } else if (result == tagSQObjectType.OT_BOOL) {
      final p = ffi.calloc<UnsignedLongLong>();
      try {
        bindings.sq_getbool(vm, index, p);
        value = p.value == 1 ? true : false;
      } finally {
        ffi.calloc.free(p);
      }
    } else if (result == tagSQObjectType.OT_ARRAY) {
      bindings.sq_pushnull(vm);
      value = [];
      while (bindings.sq_next(vm, -2) == 1) {
        (value as List).add(getValueFromStack(vm, index: -1, noPop: true));
        bindings.sq_pop(vm, 2);
      }
    } else if (result == tagSQObjectType.OT_TABLE) {
      bindings.sq_pushnull(vm);
      value = {};
      while (bindings.sq_next(vm, -2) == 0) {
        (value as Map).putIfAbsent(
            getValueFromStack(vm, index: -2, noPop: true),
            () => getValueFromStack(vm, index: -1, noPop: true));
        bindings.sq_pop(vm, 2);
      }
    } else if (result == tagSQObjectType.OT_NULL) {
      value = null;
    } else {
      print("Unknown type: $result");
      value = null;
    }

    if (!noPop) {
      bindings.sq_pop(vm, 1);
    }
    return value;
  }

  static void pushToStack(HSQUIRRELVM vm, dynamic value) {
    if (value is String) {
      bindings.sq_pushstring(vm, value.toCharPointer(), value.length);
    } else if (value is int) {
      bindings.sq_pushinteger(vm, value);
    } else if (value is double) {
      bindings.sq_pushfloat(vm, value);
    } else if (value is bool) {
      bindings.sq_pushbool(vm, value ? 1 : 0);
    }
  }
}

/// # `void` DuktapeFunction(String name, Map<String, DuktapeType> arguments, dynamic Function(Pointer<duk_hthread> ctx, Map<String, dynamic> params) call)
/// ## A function that can be called from inside a Duktape instance.
/// It takes a name, a map of arguments, and a function to call.
class SquirrelFunction {
  final String name;

  final Map<String, tagSQObjectType> arguments;

  final dynamic Function(Pointer<SQVM> vm, Map<String, dynamic> params) _call;

  SquirrelFunction(
    this.name,
    this.arguments,
    this._call,
  );

  int get nargs => arguments.entries.length;

  Map<String, dynamic> _getParams(Pointer<SQVM> vm) {
    Map<String, dynamic> params = {};
    int idx = -1;
    for (String key in arguments.keys.toList().reversed) {
      switch (arguments[key]) {
        case tagSQObjectType.OT_STRING:
          params[key] = Squirrel.getValueFromStack(vm,
              index: idx, noPop: true, expectedType: tagSQObjectType.OT_STRING);
          break;
        case tagSQObjectType.OT_INTEGER:
          params[key] = Squirrel.getValueFromStack(vm,
              index: idx,
              noPop: true,
              expectedType: tagSQObjectType.OT_INTEGER);
          break;
        case tagSQObjectType.OT_FLOAT:
          params[key] = Squirrel.getValueFromStack(vm,
              index: idx, noPop: true, expectedType: tagSQObjectType.OT_FLOAT);
          break;
        case tagSQObjectType.OT_BOOL:
          params[key] = Squirrel.getValueFromStack(vm,
              index: idx, noPop: true, expectedType: tagSQObjectType.OT_BOOL);
          break;
        default:
          break;
      }
      idx--;
    }
    return params;
  }

  void _returnValue(Pointer<SQVM> vm, dynamic value) {
    Squirrel.pushToStack(vm, value);
  }

  int call(Pointer<SQVM> vm) {
    try {
      final result = _call(vm, _getParams(vm));
      if (result != null) {
        _returnValue(vm, result);
      }
    } catch (e) {
      print(e);
      return e.hashCode;
    }
    return 1;
  }
}
