// ignore_for_file: always_specify_types, unused_field
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/squirrel3/include/squirrel.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class SquirrelBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  SquirrelBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  SquirrelBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// vm
  HSQUIRRELVM sq_open(
    int initialstacksize,
  ) {
    return _sq_open(
      initialstacksize,
    );
  }

  late final _sq_openPtr =
      _lookup<ffi.NativeFunction<HSQUIRRELVM Function(SQInteger)>>('sq_open');
  late final _sq_open = _sq_openPtr.asFunction<HSQUIRRELVM Function(int)>();

  HSQUIRRELVM sq_newthread(
    HSQUIRRELVM friendvm,
    int initialstacksize,
  ) {
    return _sq_newthread(
      friendvm,
      initialstacksize,
    );
  }

  late final _sq_newthreadPtr =
      _lookup<ffi.NativeFunction<HSQUIRRELVM Function(HSQUIRRELVM, SQInteger)>>(
          'sq_newthread');
  late final _sq_newthread =
      _sq_newthreadPtr.asFunction<HSQUIRRELVM Function(HSQUIRRELVM, int)>();

  void sq_seterrorhandler(
    HSQUIRRELVM v,
  ) {
    return _sq_seterrorhandler(
      v,
    );
  }

  late final _sq_seterrorhandlerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HSQUIRRELVM)>>(
          'sq_seterrorhandler');
  late final _sq_seterrorhandler =
      _sq_seterrorhandlerPtr.asFunction<void Function(HSQUIRRELVM)>();

  void sq_close(
    HSQUIRRELVM v,
  ) {
    return _sq_close(
      v,
    );
  }

  late final _sq_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HSQUIRRELVM)>>('sq_close');
  late final _sq_close = _sq_closePtr.asFunction<void Function(HSQUIRRELVM)>();

  void sq_setforeignptr(
    HSQUIRRELVM v,
    SQUserPointer p,
  ) {
    return _sq_setforeignptr(
      v,
      p,
    );
  }

  late final _sq_setforeignptrPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(HSQUIRRELVM, SQUserPointer)>>(
      'sq_setforeignptr');
  late final _sq_setforeignptr = _sq_setforeignptrPtr
      .asFunction<void Function(HSQUIRRELVM, SQUserPointer)>();

  SQUserPointer sq_getforeignptr(
    HSQUIRRELVM v,
  ) {
    return _sq_getforeignptr(
      v,
    );
  }

  late final _sq_getforeignptrPtr =
      _lookup<ffi.NativeFunction<SQUserPointer Function(HSQUIRRELVM)>>(
          'sq_getforeignptr');
  late final _sq_getforeignptr =
      _sq_getforeignptrPtr.asFunction<SQUserPointer Function(HSQUIRRELVM)>();

  void sq_setsharedforeignptr(
    HSQUIRRELVM v,
    SQUserPointer p,
  ) {
    return _sq_setsharedforeignptr(
      v,
      p,
    );
  }

  late final _sq_setsharedforeignptrPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(HSQUIRRELVM, SQUserPointer)>>(
      'sq_setsharedforeignptr');
  late final _sq_setsharedforeignptr = _sq_setsharedforeignptrPtr
      .asFunction<void Function(HSQUIRRELVM, SQUserPointer)>();

  SQUserPointer sq_getsharedforeignptr(
    HSQUIRRELVM v,
  ) {
    return _sq_getsharedforeignptr(
      v,
    );
  }

  late final _sq_getsharedforeignptrPtr =
      _lookup<ffi.NativeFunction<SQUserPointer Function(HSQUIRRELVM)>>(
          'sq_getsharedforeignptr');
  late final _sq_getsharedforeignptr = _sq_getsharedforeignptrPtr
      .asFunction<SQUserPointer Function(HSQUIRRELVM)>();

  void sq_setvmreleasehook(
    HSQUIRRELVM v,
    SQRELEASEHOOK hook,
  ) {
    return _sq_setvmreleasehook(
      v,
      hook,
    );
  }

  late final _sq_setvmreleasehookPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(HSQUIRRELVM, SQRELEASEHOOK)>>(
      'sq_setvmreleasehook');
  late final _sq_setvmreleasehook = _sq_setvmreleasehookPtr
      .asFunction<void Function(HSQUIRRELVM, SQRELEASEHOOK)>();

  SQRELEASEHOOK sq_getvmreleasehook(
    HSQUIRRELVM v,
  ) {
    return _sq_getvmreleasehook(
      v,
    );
  }

  late final _sq_getvmreleasehookPtr =
      _lookup<ffi.NativeFunction<SQRELEASEHOOK Function(HSQUIRRELVM)>>(
          'sq_getvmreleasehook');
  late final _sq_getvmreleasehook =
      _sq_getvmreleasehookPtr.asFunction<SQRELEASEHOOK Function(HSQUIRRELVM)>();

  void sq_setsharedreleasehook(
    HSQUIRRELVM v,
    SQRELEASEHOOK hook,
  ) {
    return _sq_setsharedreleasehook(
      v,
      hook,
    );
  }

  late final _sq_setsharedreleasehookPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(HSQUIRRELVM, SQRELEASEHOOK)>>(
      'sq_setsharedreleasehook');
  late final _sq_setsharedreleasehook = _sq_setsharedreleasehookPtr
      .asFunction<void Function(HSQUIRRELVM, SQRELEASEHOOK)>();

  SQRELEASEHOOK sq_getsharedreleasehook(
    HSQUIRRELVM v,
  ) {
    return _sq_getsharedreleasehook(
      v,
    );
  }

  late final _sq_getsharedreleasehookPtr =
      _lookup<ffi.NativeFunction<SQRELEASEHOOK Function(HSQUIRRELVM)>>(
          'sq_getsharedreleasehook');
  late final _sq_getsharedreleasehook = _sq_getsharedreleasehookPtr
      .asFunction<SQRELEASEHOOK Function(HSQUIRRELVM)>();

  void sq_setprintfunc(
    HSQUIRRELVM v,
    SQPRINTFUNCTION printfunc,
    SQPRINTFUNCTION errfunc,
  ) {
    return _sq_setprintfunc(
      v,
      printfunc,
      errfunc,
    );
  }

  late final _sq_setprintfuncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(HSQUIRRELVM, SQPRINTFUNCTION,
              SQPRINTFUNCTION)>>('sq_setprintfunc');
  late final _sq_setprintfunc = _sq_setprintfuncPtr.asFunction<
      void Function(HSQUIRRELVM, SQPRINTFUNCTION, SQPRINTFUNCTION)>();

  SQPRINTFUNCTION sq_getprintfunc(
    HSQUIRRELVM v,
  ) {
    return _sq_getprintfunc(
      v,
    );
  }

  late final _sq_getprintfuncPtr =
      _lookup<ffi.NativeFunction<SQPRINTFUNCTION Function(HSQUIRRELVM)>>(
          'sq_getprintfunc');
  late final _sq_getprintfunc =
      _sq_getprintfuncPtr.asFunction<SQPRINTFUNCTION Function(HSQUIRRELVM)>();

  SQPRINTFUNCTION sq_geterrorfunc(
    HSQUIRRELVM v,
  ) {
    return _sq_geterrorfunc(
      v,
    );
  }

  late final _sq_geterrorfuncPtr =
      _lookup<ffi.NativeFunction<SQPRINTFUNCTION Function(HSQUIRRELVM)>>(
          'sq_geterrorfunc');
  late final _sq_geterrorfunc =
      _sq_geterrorfuncPtr.asFunction<SQPRINTFUNCTION Function(HSQUIRRELVM)>();

  int sq_suspendvm(
    HSQUIRRELVM v,
  ) {
    return _sq_suspendvm(
      v,
    );
  }

  late final _sq_suspendvmPtr =
      _lookup<ffi.NativeFunction<SQRESULT Function(HSQUIRRELVM)>>(
          'sq_suspendvm');
  late final _sq_suspendvm =
      _sq_suspendvmPtr.asFunction<int Function(HSQUIRRELVM)>();

  int sq_wakeupvm(
    HSQUIRRELVM v,
    int resumedret,
    int retval,
    int raiseerror,
    int throwerror,
  ) {
    return _sq_wakeupvm(
      v,
      resumedret,
      retval,
      raiseerror,
      throwerror,
    );
  }

  late final _sq_wakeupvmPtr = _lookup<
      ffi.NativeFunction<
          SQRESULT Function(
              HSQUIRRELVM, SQBool, SQBool, SQBool, SQBool)>>('sq_wakeupvm');
  late final _sq_wakeupvm = _sq_wakeupvmPtr
      .asFunction<int Function(HSQUIRRELVM, int, int, int, int)>();

  int sq_getvmstate(
    HSQUIRRELVM v,
  ) {
    return _sq_getvmstate(
      v,
    );
  }

  late final _sq_getvmstatePtr =
      _lookup<ffi.NativeFunction<SQInteger Function(HSQUIRRELVM)>>(
          'sq_getvmstate');
  late final _sq_getvmstate =
      _sq_getvmstatePtr.asFunction<int Function(HSQUIRRELVM)>();

  int sq_getversion() {
    return _sq_getversion();
  }

  late final _sq_getversionPtr =
      _lookup<ffi.NativeFunction<SQInteger Function()>>('sq_getversion');
  late final _sq_getversion = _sq_getversionPtr.asFunction<int Function()>();

  /// compiler
  int sq_compile(
    HSQUIRRELVM v,
    SQLEXREADFUNC read,
    SQUserPointer p,
    ffi.Pointer<SQChar> sourcename,
    int raiseerror,
  ) {
    return _sq_compile(
      v,
      read,
      p,
      sourcename,
      raiseerror,
    );
  }

  late final _sq_compilePtr = _lookup<
      ffi.NativeFunction<
          SQRESULT Function(HSQUIRRELVM, SQLEXREADFUNC, SQUserPointer,
              ffi.Pointer<SQChar>, SQBool)>>('sq_compile');
  late final _sq_compile = _sq_compilePtr.asFunction<
      int Function(HSQUIRRELVM, SQLEXREADFUNC, SQUserPointer,
          ffi.Pointer<SQChar>, int)>();

  int sq_compilebuffer(
    HSQUIRRELVM v,
    ffi.Pointer<SQChar> s,
    int size,
    ffi.Pointer<SQChar> sourcename,
    int raiseerror,
  ) {
    return _sq_compilebuffer(
      v,
      s,
      size,
      sourcename,
      raiseerror,
    );
  }

  late final _sq_compilebufferPtr = _lookup<
      ffi.NativeFunction<
          SQRESULT Function(HSQUIRRELVM, ffi.Pointer<SQChar>, SQInteger,
              ffi.Pointer<SQChar>, SQBool)>>('sq_compilebuffer');
  late final _sq_compilebuffer = _sq_compilebufferPtr.asFunction<
      int Function(
          HSQUIRRELVM, ffi.Pointer<SQChar>, int, ffi.Pointer<SQChar>, int)>();

  void sq_enabledebuginfo(
    HSQUIRRELVM v,
    int enable,
  ) {
    return _sq_enabledebuginfo(
      v,
      enable,
    );
  }

  late final _sq_enabledebuginfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HSQUIRRELVM, SQBool)>>(
          'sq_enabledebuginfo');
  late final _sq_enabledebuginfo =
      _sq_enabledebuginfoPtr.asFunction<void Function(HSQUIRRELVM, int)>();

  void sq_notifyallexceptions(
    HSQUIRRELVM v,
    int enable,
  ) {
    return _sq_notifyallexceptions(
      v,
      enable,
    );
  }

  late final _sq_notifyallexceptionsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HSQUIRRELVM, SQBool)>>(
          'sq_notifyallexceptions');
  late final _sq_notifyallexceptions =
      _sq_notifyallexceptionsPtr.asFunction<void Function(HSQUIRRELVM, int)>();

  void sq_setcompilererrorhandler(
    HSQUIRRELVM v,
    SQCOMPILERERROR f,
  ) {
    return _sq_setcompilererrorhandler(
      v,
      f,
    );
  }

  late final _sq_setcompilererrorhandlerPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(HSQUIRRELVM, SQCOMPILERERROR)>>(
      'sq_setcompilererrorhandler');
  late final _sq_setcompilererrorhandler = _sq_setcompilererrorhandlerPtr
      .asFunction<void Function(HSQUIRRELVM, SQCOMPILERERROR)>();

  /// stack operations
  void sq_push(
    HSQUIRRELVM v,
    int idx,
  ) {
    return _sq_push(
      v,
      idx,
    );
  }

  late final _sq_pushPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HSQUIRRELVM, SQInteger)>>(
          'sq_push');
  late final _sq_push =
      _sq_pushPtr.asFunction<void Function(HSQUIRRELVM, int)>();

  void sq_pop(
    HSQUIRRELVM v,
    int nelemstopop,
  ) {
    return _sq_pop(
      v,
      nelemstopop,
    );
  }

  late final _sq_popPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HSQUIRRELVM, SQInteger)>>(
          'sq_pop');
  late final _sq_pop = _sq_popPtr.asFunction<void Function(HSQUIRRELVM, int)>();

  void sq_poptop(
    HSQUIRRELVM v,
  ) {
    return _sq_poptop(
      v,
    );
  }

  late final _sq_poptopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HSQUIRRELVM)>>('sq_poptop');
  late final _sq_poptop =
      _sq_poptopPtr.asFunction<void Function(HSQUIRRELVM)>();

  void sq_remove(
    HSQUIRRELVM v,
    int idx,
  ) {
    return _sq_remove(
      v,
      idx,
    );
  }

  late final _sq_removePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HSQUIRRELVM, SQInteger)>>(
          'sq_remove');
  late final _sq_remove =
      _sq_removePtr.asFunction<void Function(HSQUIRRELVM, int)>();

  int sq_gettop(
    HSQUIRRELVM v,
  ) {
    return _sq_gettop(
      v,
    );
  }

  late final _sq_gettopPtr =
      _lookup<ffi.NativeFunction<SQInteger Function(HSQUIRRELVM)>>('sq_gettop');
  late final _sq_gettop = _sq_gettopPtr.asFunction<int Function(HSQUIRRELVM)>();

  void sq_settop(
    HSQUIRRELVM v,
    int newtop,
  ) {
    return _sq_settop(
      v,
      newtop,
    );
  }

  late final _sq_settopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HSQUIRRELVM, SQInteger)>>(
          'sq_settop');
  late final _sq_settop =
      _sq_settopPtr.asFunction<void Function(HSQUIRRELVM, int)>();

  int sq_reservestack(
    HSQUIRRELVM v,
    int nsize,
  ) {
    return _sq_reservestack(
      v,
      nsize,
    );
  }

  late final _sq_reservestackPtr =
      _lookup<ffi.NativeFunction<SQRESULT Function(HSQUIRRELVM, SQInteger)>>(
          'sq_reservestack');
  late final _sq_reservestack =
      _sq_reservestackPtr.asFunction<int Function(HSQUIRRELVM, int)>();

  int sq_cmp(
    HSQUIRRELVM v,
  ) {
    return _sq_cmp(
      v,
    );
  }

  late final _sq_cmpPtr =
      _lookup<ffi.NativeFunction<SQInteger Function(HSQUIRRELVM)>>('sq_cmp');
  late final _sq_cmp = _sq_cmpPtr.asFunction<int Function(HSQUIRRELVM)>();

  void sq_move(
    HSQUIRRELVM dest,
    HSQUIRRELVM src,
    int idx,
  ) {
    return _sq_move(
      dest,
      src,
      idx,
    );
  }

  late final _sq_movePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(HSQUIRRELVM, HSQUIRRELVM, SQInteger)>>('sq_move');
  late final _sq_move =
      _sq_movePtr.asFunction<void Function(HSQUIRRELVM, HSQUIRRELVM, int)>();

  /// object creation handling
  SQUserPointer sq_newuserdata(
    HSQUIRRELVM v,
    int size,
  ) {
    return _sq_newuserdata(
      v,
      size,
    );
  }

  late final _sq_newuserdataPtr = _lookup<
      ffi.NativeFunction<
          SQUserPointer Function(
              HSQUIRRELVM, SQUnsignedInteger)>>('sq_newuserdata');
  late final _sq_newuserdata =
      _sq_newuserdataPtr.asFunction<SQUserPointer Function(HSQUIRRELVM, int)>();

  void sq_newtable(
    HSQUIRRELVM v,
  ) {
    return _sq_newtable(
      v,
    );
  }

  late final _sq_newtablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HSQUIRRELVM)>>(
          'sq_newtable');
  late final _sq_newtable =
      _sq_newtablePtr.asFunction<void Function(HSQUIRRELVM)>();

  void sq_newtableex(
    HSQUIRRELVM v,
    int initialcapacity,
  ) {
    return _sq_newtableex(
      v,
      initialcapacity,
    );
  }

  late final _sq_newtableexPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HSQUIRRELVM, SQInteger)>>(
          'sq_newtableex');
  late final _sq_newtableex =
      _sq_newtableexPtr.asFunction<void Function(HSQUIRRELVM, int)>();

  void sq_newarray(
    HSQUIRRELVM v,
    int size,
  ) {
    return _sq_newarray(
      v,
      size,
    );
  }

  late final _sq_newarrayPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HSQUIRRELVM, SQInteger)>>(
          'sq_newarray');
  late final _sq_newarray =
      _sq_newarrayPtr.asFunction<void Function(HSQUIRRELVM, int)>();

  void sq_newclosure(
    HSQUIRRELVM v,
    SQFUNCTION func,
    int nfreevars,
  ) {
    return _sq_newclosure(
      v,
      func,
      nfreevars,
    );
  }

  late final _sq_newclosurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              HSQUIRRELVM, SQFUNCTION, SQUnsignedInteger)>>('sq_newclosure');
  late final _sq_newclosure = _sq_newclosurePtr
      .asFunction<void Function(HSQUIRRELVM, SQFUNCTION, int)>();

  int sq_setparamscheck(
    HSQUIRRELVM v,
    int nparamscheck,
    ffi.Pointer<SQChar> typemask,
  ) {
    return _sq_setparamscheck(
      v,
      nparamscheck,
      typemask,
    );
  }

  late final _sq_setparamscheckPtr = _lookup<
      ffi.NativeFunction<
          SQRESULT Function(HSQUIRRELVM, SQInteger,
              ffi.Pointer<SQChar>)>>('sq_setparamscheck');
  late final _sq_setparamscheck = _sq_setparamscheckPtr
      .asFunction<int Function(HSQUIRRELVM, int, ffi.Pointer<SQChar>)>();

  int sq_bindenv(
    HSQUIRRELVM v,
    int idx,
  ) {
    return _sq_bindenv(
      v,
      idx,
    );
  }

  late final _sq_bindenvPtr =
      _lookup<ffi.NativeFunction<SQRESULT Function(HSQUIRRELVM, SQInteger)>>(
          'sq_bindenv');
  late final _sq_bindenv =
      _sq_bindenvPtr.asFunction<int Function(HSQUIRRELVM, int)>();

  int sq_setclosureroot(
    HSQUIRRELVM v,
    int idx,
  ) {
    return _sq_setclosureroot(
      v,
      idx,
    );
  }

  late final _sq_setclosurerootPtr =
      _lookup<ffi.NativeFunction<SQRESULT Function(HSQUIRRELVM, SQInteger)>>(
          'sq_setclosureroot');
  late final _sq_setclosureroot =
      _sq_setclosurerootPtr.asFunction<int Function(HSQUIRRELVM, int)>();

  int sq_getclosureroot(
    HSQUIRRELVM v,
    int idx,
  ) {
    return _sq_getclosureroot(
      v,
      idx,
    );
  }

  late final _sq_getclosurerootPtr =
      _lookup<ffi.NativeFunction<SQRESULT Function(HSQUIRRELVM, SQInteger)>>(
          'sq_getclosureroot');
  late final _sq_getclosureroot =
      _sq_getclosurerootPtr.asFunction<int Function(HSQUIRRELVM, int)>();

  void sq_pushstring(
    HSQUIRRELVM v,
    ffi.Pointer<SQChar> s,
    int len,
  ) {
    return _sq_pushstring(
      v,
      s,
      len,
    );
  }

  late final _sq_pushstringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              HSQUIRRELVM, ffi.Pointer<SQChar>, SQInteger)>>('sq_pushstring');
  late final _sq_pushstring = _sq_pushstringPtr
      .asFunction<void Function(HSQUIRRELVM, ffi.Pointer<SQChar>, int)>();

  void sq_pushfloat(
    HSQUIRRELVM v,
    double f,
  ) {
    return _sq_pushfloat(
      v,
      f,
    );
  }

  late final _sq_pushfloatPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HSQUIRRELVM, SQFloat)>>(
          'sq_pushfloat');
  late final _sq_pushfloat =
      _sq_pushfloatPtr.asFunction<void Function(HSQUIRRELVM, double)>();

  void sq_pushinteger(
    HSQUIRRELVM v,
    int n,
  ) {
    return _sq_pushinteger(
      v,
      n,
    );
  }

  late final _sq_pushintegerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HSQUIRRELVM, SQInteger)>>(
          'sq_pushinteger');
  late final _sq_pushinteger =
      _sq_pushintegerPtr.asFunction<void Function(HSQUIRRELVM, int)>();

  void sq_pushbool(
    HSQUIRRELVM v,
    int b,
  ) {
    return _sq_pushbool(
      v,
      b,
    );
  }

  late final _sq_pushboolPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HSQUIRRELVM, SQBool)>>(
          'sq_pushbool');
  late final _sq_pushbool =
      _sq_pushboolPtr.asFunction<void Function(HSQUIRRELVM, int)>();

  void sq_pushuserpointer(
    HSQUIRRELVM v,
    SQUserPointer p,
  ) {
    return _sq_pushuserpointer(
      v,
      p,
    );
  }

  late final _sq_pushuserpointerPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(HSQUIRRELVM, SQUserPointer)>>(
      'sq_pushuserpointer');
  late final _sq_pushuserpointer = _sq_pushuserpointerPtr
      .asFunction<void Function(HSQUIRRELVM, SQUserPointer)>();

  void sq_pushnull(
    HSQUIRRELVM v,
  ) {
    return _sq_pushnull(
      v,
    );
  }

  late final _sq_pushnullPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HSQUIRRELVM)>>(
          'sq_pushnull');
  late final _sq_pushnull =
      _sq_pushnullPtr.asFunction<void Function(HSQUIRRELVM)>();

  void sq_pushthread(
    HSQUIRRELVM v,
    HSQUIRRELVM thread,
  ) {
    return _sq_pushthread(
      v,
      thread,
    );
  }

  late final _sq_pushthreadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HSQUIRRELVM, HSQUIRRELVM)>>(
          'sq_pushthread');
  late final _sq_pushthread =
      _sq_pushthreadPtr.asFunction<void Function(HSQUIRRELVM, HSQUIRRELVM)>();

  tagSQObjectType sq_gettype(
    HSQUIRRELVM v,
    DartSQInteger idx,
  ) {
    return tagSQObjectType.fromValue(_sq_gettype(
      v,
      idx,
    ));
  }

  late final _sq_gettypePtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedInt Function(HSQUIRRELVM, SQInteger)>>(
      'sq_gettype');
  late final _sq_gettype =
      _sq_gettypePtr.asFunction<int Function(HSQUIRRELVM, int)>();

  int sq_typeof(
    HSQUIRRELVM v,
    int idx,
  ) {
    return _sq_typeof(
      v,
      idx,
    );
  }

  late final _sq_typeofPtr =
      _lookup<ffi.NativeFunction<SQRESULT Function(HSQUIRRELVM, SQInteger)>>(
          'sq_typeof');
  late final _sq_typeof =
      _sq_typeofPtr.asFunction<int Function(HSQUIRRELVM, int)>();

  int sq_getsize(
    HSQUIRRELVM v,
    int idx,
  ) {
    return _sq_getsize(
      v,
      idx,
    );
  }

  late final _sq_getsizePtr =
      _lookup<ffi.NativeFunction<SQInteger Function(HSQUIRRELVM, SQInteger)>>(
          'sq_getsize');
  late final _sq_getsize =
      _sq_getsizePtr.asFunction<int Function(HSQUIRRELVM, int)>();

  int sq_gethash(
    HSQUIRRELVM v,
    int idx,
  ) {
    return _sq_gethash(
      v,
      idx,
    );
  }

  late final _sq_gethashPtr =
      _lookup<ffi.NativeFunction<SQHash Function(HSQUIRRELVM, SQInteger)>>(
          'sq_gethash');
  late final _sq_gethash =
      _sq_gethashPtr.asFunction<int Function(HSQUIRRELVM, int)>();

  int sq_getbase(
    HSQUIRRELVM v,
    int idx,
  ) {
    return _sq_getbase(
      v,
      idx,
    );
  }

  late final _sq_getbasePtr =
      _lookup<ffi.NativeFunction<SQRESULT Function(HSQUIRRELVM, SQInteger)>>(
          'sq_getbase');
  late final _sq_getbase =
      _sq_getbasePtr.asFunction<int Function(HSQUIRRELVM, int)>();

  int sq_instanceof(
    HSQUIRRELVM v,
  ) {
    return _sq_instanceof(
      v,
    );
  }

  late final _sq_instanceofPtr =
      _lookup<ffi.NativeFunction<SQBool Function(HSQUIRRELVM)>>(
          'sq_instanceof');
  late final _sq_instanceof =
      _sq_instanceofPtr.asFunction<int Function(HSQUIRRELVM)>();

  int sq_tostring(
    HSQUIRRELVM v,
    int idx,
  ) {
    return _sq_tostring(
      v,
      idx,
    );
  }

  late final _sq_tostringPtr =
      _lookup<ffi.NativeFunction<SQRESULT Function(HSQUIRRELVM, SQInteger)>>(
          'sq_tostring');
  late final _sq_tostring =
      _sq_tostringPtr.asFunction<int Function(HSQUIRRELVM, int)>();

  void sq_tobool(
    HSQUIRRELVM v,
    int idx,
    ffi.Pointer<SQBool> b,
  ) {
    return _sq_tobool(
      v,
      idx,
      b,
    );
  }

  late final _sq_toboolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              HSQUIRRELVM, SQInteger, ffi.Pointer<SQBool>)>>('sq_tobool');
  late final _sq_tobool = _sq_toboolPtr
      .asFunction<void Function(HSQUIRRELVM, int, ffi.Pointer<SQBool>)>();

  int sq_getstring(
    HSQUIRRELVM v,
    int idx,
    ffi.Pointer<ffi.Pointer<SQChar>> c,
  ) {
    return _sq_getstring(
      v,
      idx,
      c,
    );
  }

  late final _sq_getstringPtr = _lookup<
      ffi.NativeFunction<
          SQRESULT Function(HSQUIRRELVM, SQInteger,
              ffi.Pointer<ffi.Pointer<SQChar>>)>>('sq_getstring');
  late final _sq_getstring = _sq_getstringPtr.asFunction<
      int Function(HSQUIRRELVM, int, ffi.Pointer<ffi.Pointer<SQChar>>)>();

  int sq_getinteger(
    HSQUIRRELVM v,
    int idx,
    ffi.Pointer<SQInteger> i,
  ) {
    return _sq_getinteger(
      v,
      idx,
      i,
    );
  }

  late final _sq_getintegerPtr = _lookup<
      ffi.NativeFunction<
          SQRESULT Function(HSQUIRRELVM, SQInteger,
              ffi.Pointer<SQInteger>)>>('sq_getinteger');
  late final _sq_getinteger = _sq_getintegerPtr
      .asFunction<int Function(HSQUIRRELVM, int, ffi.Pointer<SQInteger>)>();

  int sq_getfloat(
    HSQUIRRELVM v,
    int idx,
    ffi.Pointer<SQFloat> f,
  ) {
    return _sq_getfloat(
      v,
      idx,
      f,
    );
  }

  late final _sq_getfloatPtr = _lookup<
      ffi.NativeFunction<
          SQRESULT Function(
              HSQUIRRELVM, SQInteger, ffi.Pointer<SQFloat>)>>('sq_getfloat');
  late final _sq_getfloat = _sq_getfloatPtr
      .asFunction<int Function(HSQUIRRELVM, int, ffi.Pointer<SQFloat>)>();

  int sq_getbool(
    HSQUIRRELVM v,
    int idx,
    ffi.Pointer<SQBool> b,
  ) {
    return _sq_getbool(
      v,
      idx,
      b,
    );
  }

  late final _sq_getboolPtr = _lookup<
      ffi.NativeFunction<
          SQRESULT Function(
              HSQUIRRELVM, SQInteger, ffi.Pointer<SQBool>)>>('sq_getbool');
  late final _sq_getbool = _sq_getboolPtr
      .asFunction<int Function(HSQUIRRELVM, int, ffi.Pointer<SQBool>)>();

  int sq_getthread(
    HSQUIRRELVM v,
    int idx,
    ffi.Pointer<HSQUIRRELVM> thread,
  ) {
    return _sq_getthread(
      v,
      idx,
      thread,
    );
  }

  late final _sq_getthreadPtr = _lookup<
      ffi.NativeFunction<
          SQRESULT Function(HSQUIRRELVM, SQInteger,
              ffi.Pointer<HSQUIRRELVM>)>>('sq_getthread');
  late final _sq_getthread = _sq_getthreadPtr
      .asFunction<int Function(HSQUIRRELVM, int, ffi.Pointer<HSQUIRRELVM>)>();

  int sq_getuserpointer(
    HSQUIRRELVM v,
    int idx,
    ffi.Pointer<SQUserPointer> p,
  ) {
    return _sq_getuserpointer(
      v,
      idx,
      p,
    );
  }

  late final _sq_getuserpointerPtr = _lookup<
      ffi.NativeFunction<
          SQRESULT Function(HSQUIRRELVM, SQInteger,
              ffi.Pointer<SQUserPointer>)>>('sq_getuserpointer');
  late final _sq_getuserpointer = _sq_getuserpointerPtr
      .asFunction<int Function(HSQUIRRELVM, int, ffi.Pointer<SQUserPointer>)>();

  int sq_getuserdata(
    HSQUIRRELVM v,
    int idx,
    ffi.Pointer<SQUserPointer> p,
    ffi.Pointer<SQUserPointer> typetag,
  ) {
    return _sq_getuserdata(
      v,
      idx,
      p,
      typetag,
    );
  }

  late final _sq_getuserdataPtr = _lookup<
      ffi.NativeFunction<
          SQRESULT Function(HSQUIRRELVM, SQInteger, ffi.Pointer<SQUserPointer>,
              ffi.Pointer<SQUserPointer>)>>('sq_getuserdata');
  late final _sq_getuserdata = _sq_getuserdataPtr.asFunction<
      int Function(HSQUIRRELVM, int, ffi.Pointer<SQUserPointer>,
          ffi.Pointer<SQUserPointer>)>();

  int sq_settypetag(
    HSQUIRRELVM v,
    int idx,
    SQUserPointer typetag,
  ) {
    return _sq_settypetag(
      v,
      idx,
      typetag,
    );
  }

  late final _sq_settypetagPtr = _lookup<
      ffi.NativeFunction<
          SQRESULT Function(
              HSQUIRRELVM, SQInteger, SQUserPointer)>>('sq_settypetag');
  late final _sq_settypetag = _sq_settypetagPtr
      .asFunction<int Function(HSQUIRRELVM, int, SQUserPointer)>();

  int sq_gettypetag(
    HSQUIRRELVM v,
    int idx,
    ffi.Pointer<SQUserPointer> typetag,
  ) {
    return _sq_gettypetag(
      v,
      idx,
      typetag,
    );
  }

  late final _sq_gettypetagPtr = _lookup<
      ffi.NativeFunction<
          SQRESULT Function(HSQUIRRELVM, SQInteger,
              ffi.Pointer<SQUserPointer>)>>('sq_gettypetag');
  late final _sq_gettypetag = _sq_gettypetagPtr
      .asFunction<int Function(HSQUIRRELVM, int, ffi.Pointer<SQUserPointer>)>();

  void sq_setreleasehook(
    HSQUIRRELVM v,
    int idx,
    SQRELEASEHOOK hook,
  ) {
    return _sq_setreleasehook(
      v,
      idx,
      hook,
    );
  }

  late final _sq_setreleasehookPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              HSQUIRRELVM, SQInteger, SQRELEASEHOOK)>>('sq_setreleasehook');
  late final _sq_setreleasehook = _sq_setreleasehookPtr
      .asFunction<void Function(HSQUIRRELVM, int, SQRELEASEHOOK)>();

  SQRELEASEHOOK sq_getreleasehook(
    HSQUIRRELVM v,
    int idx,
  ) {
    return _sq_getreleasehook(
      v,
      idx,
    );
  }

  late final _sq_getreleasehookPtr = _lookup<
          ffi.NativeFunction<SQRELEASEHOOK Function(HSQUIRRELVM, SQInteger)>>(
      'sq_getreleasehook');
  late final _sq_getreleasehook = _sq_getreleasehookPtr
      .asFunction<SQRELEASEHOOK Function(HSQUIRRELVM, int)>();

  ffi.Pointer<SQChar> sq_getscratchpad(
    HSQUIRRELVM v,
    int minsize,
  ) {
    return _sq_getscratchpad(
      v,
      minsize,
    );
  }

  late final _sq_getscratchpadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<SQChar> Function(
              HSQUIRRELVM, SQInteger)>>('sq_getscratchpad');
  late final _sq_getscratchpad = _sq_getscratchpadPtr
      .asFunction<ffi.Pointer<SQChar> Function(HSQUIRRELVM, int)>();

  int sq_getfunctioninfo(
    HSQUIRRELVM v,
    int level,
    ffi.Pointer<SQFunctionInfo> fi,
  ) {
    return _sq_getfunctioninfo(
      v,
      level,
      fi,
    );
  }

  late final _sq_getfunctioninfoPtr = _lookup<
      ffi.NativeFunction<
          SQRESULT Function(HSQUIRRELVM, SQInteger,
              ffi.Pointer<SQFunctionInfo>)>>('sq_getfunctioninfo');
  late final _sq_getfunctioninfo = _sq_getfunctioninfoPtr.asFunction<
      int Function(HSQUIRRELVM, int, ffi.Pointer<SQFunctionInfo>)>();

  int sq_getclosureinfo(
    HSQUIRRELVM v,
    int idx,
    ffi.Pointer<SQUnsignedInteger> nparams,
    ffi.Pointer<SQUnsignedInteger> nfreevars,
  ) {
    return _sq_getclosureinfo(
      v,
      idx,
      nparams,
      nfreevars,
    );
  }

  late final _sq_getclosureinfoPtr = _lookup<
      ffi.NativeFunction<
          SQRESULT Function(
              HSQUIRRELVM,
              SQInteger,
              ffi.Pointer<SQUnsignedInteger>,
              ffi.Pointer<SQUnsignedInteger>)>>('sq_getclosureinfo');
  late final _sq_getclosureinfo = _sq_getclosureinfoPtr.asFunction<
      int Function(HSQUIRRELVM, int, ffi.Pointer<SQUnsignedInteger>,
          ffi.Pointer<SQUnsignedInteger>)>();

  int sq_getclosurename(
    HSQUIRRELVM v,
    int idx,
  ) {
    return _sq_getclosurename(
      v,
      idx,
    );
  }

  late final _sq_getclosurenamePtr =
      _lookup<ffi.NativeFunction<SQRESULT Function(HSQUIRRELVM, SQInteger)>>(
          'sq_getclosurename');
  late final _sq_getclosurename =
      _sq_getclosurenamePtr.asFunction<int Function(HSQUIRRELVM, int)>();

  int sq_setnativeclosurename(
    HSQUIRRELVM v,
    int idx,
    ffi.Pointer<SQChar> name,
  ) {
    return _sq_setnativeclosurename(
      v,
      idx,
      name,
    );
  }

  late final _sq_setnativeclosurenamePtr = _lookup<
      ffi.NativeFunction<
          SQRESULT Function(HSQUIRRELVM, SQInteger,
              ffi.Pointer<SQChar>)>>('sq_setnativeclosurename');
  late final _sq_setnativeclosurename = _sq_setnativeclosurenamePtr
      .asFunction<int Function(HSQUIRRELVM, int, ffi.Pointer<SQChar>)>();

  int sq_setinstanceup(
    HSQUIRRELVM v,
    int idx,
    SQUserPointer p,
  ) {
    return _sq_setinstanceup(
      v,
      idx,
      p,
    );
  }

  late final _sq_setinstanceupPtr = _lookup<
      ffi.NativeFunction<
          SQRESULT Function(
              HSQUIRRELVM, SQInteger, SQUserPointer)>>('sq_setinstanceup');
  late final _sq_setinstanceup = _sq_setinstanceupPtr
      .asFunction<int Function(HSQUIRRELVM, int, SQUserPointer)>();

  int sq_getinstanceup(
    HSQUIRRELVM v,
    int idx,
    ffi.Pointer<SQUserPointer> p,
    SQUserPointer typetag,
  ) {
    return _sq_getinstanceup(
      v,
      idx,
      p,
      typetag,
    );
  }

  late final _sq_getinstanceupPtr = _lookup<
      ffi.NativeFunction<
          SQRESULT Function(HSQUIRRELVM, SQInteger, ffi.Pointer<SQUserPointer>,
              SQUserPointer)>>('sq_getinstanceup');
  late final _sq_getinstanceup = _sq_getinstanceupPtr.asFunction<
      int Function(
          HSQUIRRELVM, int, ffi.Pointer<SQUserPointer>, SQUserPointer)>();

  int sq_setclassudsize(
    HSQUIRRELVM v,
    int idx,
    int udsize,
  ) {
    return _sq_setclassudsize(
      v,
      idx,
      udsize,
    );
  }

  late final _sq_setclassudsizePtr = _lookup<
      ffi.NativeFunction<
          SQRESULT Function(
              HSQUIRRELVM, SQInteger, SQInteger)>>('sq_setclassudsize');
  late final _sq_setclassudsize =
      _sq_setclassudsizePtr.asFunction<int Function(HSQUIRRELVM, int, int)>();

  int sq_newclass(
    HSQUIRRELVM v,
    int hasbase,
  ) {
    return _sq_newclass(
      v,
      hasbase,
    );
  }

  late final _sq_newclassPtr =
      _lookup<ffi.NativeFunction<SQRESULT Function(HSQUIRRELVM, SQBool)>>(
          'sq_newclass');
  late final _sq_newclass =
      _sq_newclassPtr.asFunction<int Function(HSQUIRRELVM, int)>();

  int sq_createinstance(
    HSQUIRRELVM v,
    int idx,
  ) {
    return _sq_createinstance(
      v,
      idx,
    );
  }

  late final _sq_createinstancePtr =
      _lookup<ffi.NativeFunction<SQRESULT Function(HSQUIRRELVM, SQInteger)>>(
          'sq_createinstance');
  late final _sq_createinstance =
      _sq_createinstancePtr.asFunction<int Function(HSQUIRRELVM, int)>();

  int sq_setattributes(
    HSQUIRRELVM v,
    int idx,
  ) {
    return _sq_setattributes(
      v,
      idx,
    );
  }

  late final _sq_setattributesPtr =
      _lookup<ffi.NativeFunction<SQRESULT Function(HSQUIRRELVM, SQInteger)>>(
          'sq_setattributes');
  late final _sq_setattributes =
      _sq_setattributesPtr.asFunction<int Function(HSQUIRRELVM, int)>();

  int sq_getattributes(
    HSQUIRRELVM v,
    int idx,
  ) {
    return _sq_getattributes(
      v,
      idx,
    );
  }

  late final _sq_getattributesPtr =
      _lookup<ffi.NativeFunction<SQRESULT Function(HSQUIRRELVM, SQInteger)>>(
          'sq_getattributes');
  late final _sq_getattributes =
      _sq_getattributesPtr.asFunction<int Function(HSQUIRRELVM, int)>();

  int sq_getclass(
    HSQUIRRELVM v,
    int idx,
  ) {
    return _sq_getclass(
      v,
      idx,
    );
  }

  late final _sq_getclassPtr =
      _lookup<ffi.NativeFunction<SQRESULT Function(HSQUIRRELVM, SQInteger)>>(
          'sq_getclass');
  late final _sq_getclass =
      _sq_getclassPtr.asFunction<int Function(HSQUIRRELVM, int)>();

  void sq_weakref(
    HSQUIRRELVM v,
    int idx,
  ) {
    return _sq_weakref(
      v,
      idx,
    );
  }

  late final _sq_weakrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HSQUIRRELVM, SQInteger)>>(
          'sq_weakref');
  late final _sq_weakref =
      _sq_weakrefPtr.asFunction<void Function(HSQUIRRELVM, int)>();

  DartSQInteger sq_getdefaultdelegate(
    HSQUIRRELVM v,
    tagSQObjectType t,
  ) {
    return _sq_getdefaultdelegate(
      v,
      t.value,
    );
  }

  late final _sq_getdefaultdelegatePtr = _lookup<
          ffi.NativeFunction<SQRESULT Function(HSQUIRRELVM, ffi.UnsignedInt)>>(
      'sq_getdefaultdelegate');
  late final _sq_getdefaultdelegate =
      _sq_getdefaultdelegatePtr.asFunction<int Function(HSQUIRRELVM, int)>();

  int sq_getmemberhandle(
    HSQUIRRELVM v,
    int idx,
    ffi.Pointer<HSQMEMBERHANDLE> handle,
  ) {
    return _sq_getmemberhandle(
      v,
      idx,
      handle,
    );
  }

  late final _sq_getmemberhandlePtr = _lookup<
      ffi.NativeFunction<
          SQRESULT Function(HSQUIRRELVM, SQInteger,
              ffi.Pointer<HSQMEMBERHANDLE>)>>('sq_getmemberhandle');
  late final _sq_getmemberhandle = _sq_getmemberhandlePtr.asFunction<
      int Function(HSQUIRRELVM, int, ffi.Pointer<HSQMEMBERHANDLE>)>();

  int sq_getbyhandle(
    HSQUIRRELVM v,
    int idx,
    ffi.Pointer<HSQMEMBERHANDLE> handle,
  ) {
    return _sq_getbyhandle(
      v,
      idx,
      handle,
    );
  }

  late final _sq_getbyhandlePtr = _lookup<
      ffi.NativeFunction<
          SQRESULT Function(HSQUIRRELVM, SQInteger,
              ffi.Pointer<HSQMEMBERHANDLE>)>>('sq_getbyhandle');
  late final _sq_getbyhandle = _sq_getbyhandlePtr.asFunction<
      int Function(HSQUIRRELVM, int, ffi.Pointer<HSQMEMBERHANDLE>)>();

  int sq_setbyhandle(
    HSQUIRRELVM v,
    int idx,
    ffi.Pointer<HSQMEMBERHANDLE> handle,
  ) {
    return _sq_setbyhandle(
      v,
      idx,
      handle,
    );
  }

  late final _sq_setbyhandlePtr = _lookup<
      ffi.NativeFunction<
          SQRESULT Function(HSQUIRRELVM, SQInteger,
              ffi.Pointer<HSQMEMBERHANDLE>)>>('sq_setbyhandle');
  late final _sq_setbyhandle = _sq_setbyhandlePtr.asFunction<
      int Function(HSQUIRRELVM, int, ffi.Pointer<HSQMEMBERHANDLE>)>();

  /// object manipulation
  void sq_pushroottable(
    HSQUIRRELVM v,
  ) {
    return _sq_pushroottable(
      v,
    );
  }

  late final _sq_pushroottablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HSQUIRRELVM)>>(
          'sq_pushroottable');
  late final _sq_pushroottable =
      _sq_pushroottablePtr.asFunction<void Function(HSQUIRRELVM)>();

  void sq_pushregistrytable(
    HSQUIRRELVM v,
  ) {
    return _sq_pushregistrytable(
      v,
    );
  }

  late final _sq_pushregistrytablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HSQUIRRELVM)>>(
          'sq_pushregistrytable');
  late final _sq_pushregistrytable =
      _sq_pushregistrytablePtr.asFunction<void Function(HSQUIRRELVM)>();

  void sq_pushconsttable(
    HSQUIRRELVM v,
  ) {
    return _sq_pushconsttable(
      v,
    );
  }

  late final _sq_pushconsttablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HSQUIRRELVM)>>(
          'sq_pushconsttable');
  late final _sq_pushconsttable =
      _sq_pushconsttablePtr.asFunction<void Function(HSQUIRRELVM)>();

  int sq_setroottable(
    HSQUIRRELVM v,
  ) {
    return _sq_setroottable(
      v,
    );
  }

  late final _sq_setroottablePtr =
      _lookup<ffi.NativeFunction<SQRESULT Function(HSQUIRRELVM)>>(
          'sq_setroottable');
  late final _sq_setroottable =
      _sq_setroottablePtr.asFunction<int Function(HSQUIRRELVM)>();

  int sq_setconsttable(
    HSQUIRRELVM v,
  ) {
    return _sq_setconsttable(
      v,
    );
  }

  late final _sq_setconsttablePtr =
      _lookup<ffi.NativeFunction<SQRESULT Function(HSQUIRRELVM)>>(
          'sq_setconsttable');
  late final _sq_setconsttable =
      _sq_setconsttablePtr.asFunction<int Function(HSQUIRRELVM)>();

  int sq_newslot(
    HSQUIRRELVM v,
    int idx,
    int bstatic,
  ) {
    return _sq_newslot(
      v,
      idx,
      bstatic,
    );
  }

  late final _sq_newslotPtr = _lookup<
      ffi.NativeFunction<
          SQRESULT Function(HSQUIRRELVM, SQInteger, SQBool)>>('sq_newslot');
  late final _sq_newslot =
      _sq_newslotPtr.asFunction<int Function(HSQUIRRELVM, int, int)>();

  int sq_deleteslot(
    HSQUIRRELVM v,
    int idx,
    int pushval,
  ) {
    return _sq_deleteslot(
      v,
      idx,
      pushval,
    );
  }

  late final _sq_deleteslotPtr = _lookup<
      ffi.NativeFunction<
          SQRESULT Function(HSQUIRRELVM, SQInteger, SQBool)>>('sq_deleteslot');
  late final _sq_deleteslot =
      _sq_deleteslotPtr.asFunction<int Function(HSQUIRRELVM, int, int)>();

  int sq_set(
    HSQUIRRELVM v,
    int idx,
  ) {
    return _sq_set(
      v,
      idx,
    );
  }

  late final _sq_setPtr =
      _lookup<ffi.NativeFunction<SQRESULT Function(HSQUIRRELVM, SQInteger)>>(
          'sq_set');
  late final _sq_set = _sq_setPtr.asFunction<int Function(HSQUIRRELVM, int)>();

  int sq_get(
    HSQUIRRELVM v,
    int idx,
  ) {
    return _sq_get(
      v,
      idx,
    );
  }

  late final _sq_getPtr =
      _lookup<ffi.NativeFunction<SQRESULT Function(HSQUIRRELVM, SQInteger)>>(
          'sq_get');
  late final _sq_get = _sq_getPtr.asFunction<int Function(HSQUIRRELVM, int)>();

  int sq_rawget(
    HSQUIRRELVM v,
    int idx,
  ) {
    return _sq_rawget(
      v,
      idx,
    );
  }

  late final _sq_rawgetPtr =
      _lookup<ffi.NativeFunction<SQRESULT Function(HSQUIRRELVM, SQInteger)>>(
          'sq_rawget');
  late final _sq_rawget =
      _sq_rawgetPtr.asFunction<int Function(HSQUIRRELVM, int)>();

  int sq_rawset(
    HSQUIRRELVM v,
    int idx,
  ) {
    return _sq_rawset(
      v,
      idx,
    );
  }

  late final _sq_rawsetPtr =
      _lookup<ffi.NativeFunction<SQRESULT Function(HSQUIRRELVM, SQInteger)>>(
          'sq_rawset');
  late final _sq_rawset =
      _sq_rawsetPtr.asFunction<int Function(HSQUIRRELVM, int)>();

  int sq_rawdeleteslot(
    HSQUIRRELVM v,
    int idx,
    int pushval,
  ) {
    return _sq_rawdeleteslot(
      v,
      idx,
      pushval,
    );
  }

  late final _sq_rawdeleteslotPtr = _lookup<
          ffi
          .NativeFunction<SQRESULT Function(HSQUIRRELVM, SQInteger, SQBool)>>(
      'sq_rawdeleteslot');
  late final _sq_rawdeleteslot =
      _sq_rawdeleteslotPtr.asFunction<int Function(HSQUIRRELVM, int, int)>();

  int sq_newmember(
    HSQUIRRELVM v,
    int idx,
    int bstatic,
  ) {
    return _sq_newmember(
      v,
      idx,
      bstatic,
    );
  }

  late final _sq_newmemberPtr = _lookup<
      ffi.NativeFunction<
          SQRESULT Function(HSQUIRRELVM, SQInteger, SQBool)>>('sq_newmember');
  late final _sq_newmember =
      _sq_newmemberPtr.asFunction<int Function(HSQUIRRELVM, int, int)>();

  int sq_rawnewmember(
    HSQUIRRELVM v,
    int idx,
    int bstatic,
  ) {
    return _sq_rawnewmember(
      v,
      idx,
      bstatic,
    );
  }

  late final _sq_rawnewmemberPtr = _lookup<
          ffi
          .NativeFunction<SQRESULT Function(HSQUIRRELVM, SQInteger, SQBool)>>(
      'sq_rawnewmember');
  late final _sq_rawnewmember =
      _sq_rawnewmemberPtr.asFunction<int Function(HSQUIRRELVM, int, int)>();

  int sq_arrayappend(
    HSQUIRRELVM v,
    int idx,
  ) {
    return _sq_arrayappend(
      v,
      idx,
    );
  }

  late final _sq_arrayappendPtr =
      _lookup<ffi.NativeFunction<SQRESULT Function(HSQUIRRELVM, SQInteger)>>(
          'sq_arrayappend');
  late final _sq_arrayappend =
      _sq_arrayappendPtr.asFunction<int Function(HSQUIRRELVM, int)>();

  int sq_arraypop(
    HSQUIRRELVM v,
    int idx,
    int pushval,
  ) {
    return _sq_arraypop(
      v,
      idx,
      pushval,
    );
  }

  late final _sq_arraypopPtr = _lookup<
      ffi.NativeFunction<
          SQRESULT Function(HSQUIRRELVM, SQInteger, SQBool)>>('sq_arraypop');
  late final _sq_arraypop =
      _sq_arraypopPtr.asFunction<int Function(HSQUIRRELVM, int, int)>();

  int sq_arrayresize(
    HSQUIRRELVM v,
    int idx,
    int newsize,
  ) {
    return _sq_arrayresize(
      v,
      idx,
      newsize,
    );
  }

  late final _sq_arrayresizePtr = _lookup<
      ffi.NativeFunction<
          SQRESULT Function(
              HSQUIRRELVM, SQInteger, SQInteger)>>('sq_arrayresize');
  late final _sq_arrayresize =
      _sq_arrayresizePtr.asFunction<int Function(HSQUIRRELVM, int, int)>();

  int sq_arrayreverse(
    HSQUIRRELVM v,
    int idx,
  ) {
    return _sq_arrayreverse(
      v,
      idx,
    );
  }

  late final _sq_arrayreversePtr =
      _lookup<ffi.NativeFunction<SQRESULT Function(HSQUIRRELVM, SQInteger)>>(
          'sq_arrayreverse');
  late final _sq_arrayreverse =
      _sq_arrayreversePtr.asFunction<int Function(HSQUIRRELVM, int)>();

  int sq_arrayremove(
    HSQUIRRELVM v,
    int idx,
    int itemidx,
  ) {
    return _sq_arrayremove(
      v,
      idx,
      itemidx,
    );
  }

  late final _sq_arrayremovePtr = _lookup<
      ffi.NativeFunction<
          SQRESULT Function(
              HSQUIRRELVM, SQInteger, SQInteger)>>('sq_arrayremove');
  late final _sq_arrayremove =
      _sq_arrayremovePtr.asFunction<int Function(HSQUIRRELVM, int, int)>();

  int sq_arrayinsert(
    HSQUIRRELVM v,
    int idx,
    int destpos,
  ) {
    return _sq_arrayinsert(
      v,
      idx,
      destpos,
    );
  }

  late final _sq_arrayinsertPtr = _lookup<
      ffi.NativeFunction<
          SQRESULT Function(
              HSQUIRRELVM, SQInteger, SQInteger)>>('sq_arrayinsert');
  late final _sq_arrayinsert =
      _sq_arrayinsertPtr.asFunction<int Function(HSQUIRRELVM, int, int)>();

  int sq_setdelegate(
    HSQUIRRELVM v,
    int idx,
  ) {
    return _sq_setdelegate(
      v,
      idx,
    );
  }

  late final _sq_setdelegatePtr =
      _lookup<ffi.NativeFunction<SQRESULT Function(HSQUIRRELVM, SQInteger)>>(
          'sq_setdelegate');
  late final _sq_setdelegate =
      _sq_setdelegatePtr.asFunction<int Function(HSQUIRRELVM, int)>();

  int sq_getdelegate(
    HSQUIRRELVM v,
    int idx,
  ) {
    return _sq_getdelegate(
      v,
      idx,
    );
  }

  late final _sq_getdelegatePtr =
      _lookup<ffi.NativeFunction<SQRESULT Function(HSQUIRRELVM, SQInteger)>>(
          'sq_getdelegate');
  late final _sq_getdelegate =
      _sq_getdelegatePtr.asFunction<int Function(HSQUIRRELVM, int)>();

  int sq_clone(
    HSQUIRRELVM v,
    int idx,
  ) {
    return _sq_clone(
      v,
      idx,
    );
  }

  late final _sq_clonePtr =
      _lookup<ffi.NativeFunction<SQRESULT Function(HSQUIRRELVM, SQInteger)>>(
          'sq_clone');
  late final _sq_clone =
      _sq_clonePtr.asFunction<int Function(HSQUIRRELVM, int)>();

  int sq_setfreevariable(
    HSQUIRRELVM v,
    int idx,
    int nval,
  ) {
    return _sq_setfreevariable(
      v,
      idx,
      nval,
    );
  }

  late final _sq_setfreevariablePtr = _lookup<
      ffi.NativeFunction<
          SQRESULT Function(HSQUIRRELVM, SQInteger,
              SQUnsignedInteger)>>('sq_setfreevariable');
  late final _sq_setfreevariable =
      _sq_setfreevariablePtr.asFunction<int Function(HSQUIRRELVM, int, int)>();

  int sq_next(
    HSQUIRRELVM v,
    int idx,
  ) {
    return _sq_next(
      v,
      idx,
    );
  }

  late final _sq_nextPtr =
      _lookup<ffi.NativeFunction<SQRESULT Function(HSQUIRRELVM, SQInteger)>>(
          'sq_next');
  late final _sq_next =
      _sq_nextPtr.asFunction<int Function(HSQUIRRELVM, int)>();

  int sq_getweakrefval(
    HSQUIRRELVM v,
    int idx,
  ) {
    return _sq_getweakrefval(
      v,
      idx,
    );
  }

  late final _sq_getweakrefvalPtr =
      _lookup<ffi.NativeFunction<SQRESULT Function(HSQUIRRELVM, SQInteger)>>(
          'sq_getweakrefval');
  late final _sq_getweakrefval =
      _sq_getweakrefvalPtr.asFunction<int Function(HSQUIRRELVM, int)>();

  int sq_clear(
    HSQUIRRELVM v,
    int idx,
  ) {
    return _sq_clear(
      v,
      idx,
    );
  }

  late final _sq_clearPtr =
      _lookup<ffi.NativeFunction<SQRESULT Function(HSQUIRRELVM, SQInteger)>>(
          'sq_clear');
  late final _sq_clear =
      _sq_clearPtr.asFunction<int Function(HSQUIRRELVM, int)>();

  /// calls
  int sq_call(
    HSQUIRRELVM v,
    int params,
    int retval,
    int raiseerror,
  ) {
    return _sq_call(
      v,
      params,
      retval,
      raiseerror,
    );
  }

  late final _sq_callPtr = _lookup<
      ffi.NativeFunction<
          SQRESULT Function(
              HSQUIRRELVM, SQInteger, SQBool, SQBool)>>('sq_call');
  late final _sq_call =
      _sq_callPtr.asFunction<int Function(HSQUIRRELVM, int, int, int)>();

  int sq_resume(
    HSQUIRRELVM v,
    int retval,
    int raiseerror,
  ) {
    return _sq_resume(
      v,
      retval,
      raiseerror,
    );
  }

  late final _sq_resumePtr = _lookup<
          ffi.NativeFunction<SQRESULT Function(HSQUIRRELVM, SQBool, SQBool)>>(
      'sq_resume');
  late final _sq_resume =
      _sq_resumePtr.asFunction<int Function(HSQUIRRELVM, int, int)>();

  ffi.Pointer<SQChar> sq_getlocal(
    HSQUIRRELVM v,
    int level,
    int idx,
  ) {
    return _sq_getlocal(
      v,
      level,
      idx,
    );
  }

  late final _sq_getlocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<SQChar> Function(HSQUIRRELVM, SQUnsignedInteger,
              SQUnsignedInteger)>>('sq_getlocal');
  late final _sq_getlocal = _sq_getlocalPtr
      .asFunction<ffi.Pointer<SQChar> Function(HSQUIRRELVM, int, int)>();

  int sq_getcallee(
    HSQUIRRELVM v,
  ) {
    return _sq_getcallee(
      v,
    );
  }

  late final _sq_getcalleePtr =
      _lookup<ffi.NativeFunction<SQRESULT Function(HSQUIRRELVM)>>(
          'sq_getcallee');
  late final _sq_getcallee =
      _sq_getcalleePtr.asFunction<int Function(HSQUIRRELVM)>();

  ffi.Pointer<SQChar> sq_getfreevariable(
    HSQUIRRELVM v,
    int idx,
    int nval,
  ) {
    return _sq_getfreevariable(
      v,
      idx,
      nval,
    );
  }

  late final _sq_getfreevariablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<SQChar> Function(HSQUIRRELVM, SQInteger,
              SQUnsignedInteger)>>('sq_getfreevariable');
  late final _sq_getfreevariable = _sq_getfreevariablePtr
      .asFunction<ffi.Pointer<SQChar> Function(HSQUIRRELVM, int, int)>();

  int sq_throwerror(
    HSQUIRRELVM v,
    ffi.Pointer<SQChar> err,
  ) {
    return _sq_throwerror(
      v,
      err,
    );
  }

  late final _sq_throwerrorPtr = _lookup<
          ffi
          .NativeFunction<SQRESULT Function(HSQUIRRELVM, ffi.Pointer<SQChar>)>>(
      'sq_throwerror');
  late final _sq_throwerror = _sq_throwerrorPtr
      .asFunction<int Function(HSQUIRRELVM, ffi.Pointer<SQChar>)>();

  int sq_throwobject(
    HSQUIRRELVM v,
  ) {
    return _sq_throwobject(
      v,
    );
  }

  late final _sq_throwobjectPtr =
      _lookup<ffi.NativeFunction<SQRESULT Function(HSQUIRRELVM)>>(
          'sq_throwobject');
  late final _sq_throwobject =
      _sq_throwobjectPtr.asFunction<int Function(HSQUIRRELVM)>();

  void sq_reseterror(
    HSQUIRRELVM v,
  ) {
    return _sq_reseterror(
      v,
    );
  }

  late final _sq_reseterrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HSQUIRRELVM)>>(
          'sq_reseterror');
  late final _sq_reseterror =
      _sq_reseterrorPtr.asFunction<void Function(HSQUIRRELVM)>();

  void sq_getlasterror(
    HSQUIRRELVM v,
  ) {
    return _sq_getlasterror(
      v,
    );
  }

  late final _sq_getlasterrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HSQUIRRELVM)>>(
          'sq_getlasterror');
  late final _sq_getlasterror =
      _sq_getlasterrorPtr.asFunction<void Function(HSQUIRRELVM)>();

  /// raw object handling
  int sq_getstackobj(
    HSQUIRRELVM v,
    int idx,
    ffi.Pointer<HSQOBJECT> po,
  ) {
    return _sq_getstackobj(
      v,
      idx,
      po,
    );
  }

  late final _sq_getstackobjPtr = _lookup<
      ffi.NativeFunction<
          SQRESULT Function(HSQUIRRELVM, SQInteger,
              ffi.Pointer<HSQOBJECT>)>>('sq_getstackobj');
  late final _sq_getstackobj = _sq_getstackobjPtr
      .asFunction<int Function(HSQUIRRELVM, int, ffi.Pointer<HSQOBJECT>)>();

  void sq_pushobject(
    HSQUIRRELVM v,
    HSQOBJECT obj,
  ) {
    return _sq_pushobject(
      v,
      obj,
    );
  }

  late final _sq_pushobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HSQUIRRELVM, HSQOBJECT)>>(
          'sq_pushobject');
  late final _sq_pushobject =
      _sq_pushobjectPtr.asFunction<void Function(HSQUIRRELVM, HSQOBJECT)>();

  void sq_addref(
    HSQUIRRELVM v,
    ffi.Pointer<HSQOBJECT> po,
  ) {
    return _sq_addref(
      v,
      po,
    );
  }

  late final _sq_addrefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(HSQUIRRELVM, ffi.Pointer<HSQOBJECT>)>>('sq_addref');
  late final _sq_addref = _sq_addrefPtr
      .asFunction<void Function(HSQUIRRELVM, ffi.Pointer<HSQOBJECT>)>();

  int sq_release(
    HSQUIRRELVM v,
    ffi.Pointer<HSQOBJECT> po,
  ) {
    return _sq_release(
      v,
      po,
    );
  }

  late final _sq_releasePtr = _lookup<
      ffi.NativeFunction<
          SQBool Function(HSQUIRRELVM, ffi.Pointer<HSQOBJECT>)>>('sq_release');
  late final _sq_release = _sq_releasePtr
      .asFunction<int Function(HSQUIRRELVM, ffi.Pointer<HSQOBJECT>)>();

  int sq_getrefcount(
    HSQUIRRELVM v,
    ffi.Pointer<HSQOBJECT> po,
  ) {
    return _sq_getrefcount(
      v,
      po,
    );
  }

  late final _sq_getrefcountPtr = _lookup<
      ffi.NativeFunction<
          SQUnsignedInteger Function(
              HSQUIRRELVM, ffi.Pointer<HSQOBJECT>)>>('sq_getrefcount');
  late final _sq_getrefcount = _sq_getrefcountPtr
      .asFunction<int Function(HSQUIRRELVM, ffi.Pointer<HSQOBJECT>)>();

  void sq_resetobject(
    ffi.Pointer<HSQOBJECT> po,
  ) {
    return _sq_resetobject(
      po,
    );
  }

  late final _sq_resetobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<HSQOBJECT>)>>(
          'sq_resetobject');
  late final _sq_resetobject =
      _sq_resetobjectPtr.asFunction<void Function(ffi.Pointer<HSQOBJECT>)>();

  ffi.Pointer<SQChar> sq_objtostring(
    ffi.Pointer<HSQOBJECT> o,
  ) {
    return _sq_objtostring(
      o,
    );
  }

  late final _sq_objtostringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<SQChar> Function(
              ffi.Pointer<HSQOBJECT>)>>('sq_objtostring');
  late final _sq_objtostring = _sq_objtostringPtr
      .asFunction<ffi.Pointer<SQChar> Function(ffi.Pointer<HSQOBJECT>)>();

  int sq_objtobool(
    ffi.Pointer<HSQOBJECT> o,
  ) {
    return _sq_objtobool(
      o,
    );
  }

  late final _sq_objtoboolPtr =
      _lookup<ffi.NativeFunction<SQBool Function(ffi.Pointer<HSQOBJECT>)>>(
          'sq_objtobool');
  late final _sq_objtobool =
      _sq_objtoboolPtr.asFunction<int Function(ffi.Pointer<HSQOBJECT>)>();

  int sq_objtointeger(
    ffi.Pointer<HSQOBJECT> o,
  ) {
    return _sq_objtointeger(
      o,
    );
  }

  late final _sq_objtointegerPtr =
      _lookup<ffi.NativeFunction<SQInteger Function(ffi.Pointer<HSQOBJECT>)>>(
          'sq_objtointeger');
  late final _sq_objtointeger =
      _sq_objtointegerPtr.asFunction<int Function(ffi.Pointer<HSQOBJECT>)>();

  double sq_objtofloat(
    ffi.Pointer<HSQOBJECT> o,
  ) {
    return _sq_objtofloat(
      o,
    );
  }

  late final _sq_objtofloatPtr =
      _lookup<ffi.NativeFunction<SQFloat Function(ffi.Pointer<HSQOBJECT>)>>(
          'sq_objtofloat');
  late final _sq_objtofloat =
      _sq_objtofloatPtr.asFunction<double Function(ffi.Pointer<HSQOBJECT>)>();

  SQUserPointer sq_objtouserpointer(
    ffi.Pointer<HSQOBJECT> o,
  ) {
    return _sq_objtouserpointer(
      o,
    );
  }

  late final _sq_objtouserpointerPtr = _lookup<
          ffi.NativeFunction<SQUserPointer Function(ffi.Pointer<HSQOBJECT>)>>(
      'sq_objtouserpointer');
  late final _sq_objtouserpointer = _sq_objtouserpointerPtr
      .asFunction<SQUserPointer Function(ffi.Pointer<HSQOBJECT>)>();

  int sq_getobjtypetag(
    ffi.Pointer<HSQOBJECT> o,
    ffi.Pointer<SQUserPointer> typetag,
  ) {
    return _sq_getobjtypetag(
      o,
      typetag,
    );
  }

  late final _sq_getobjtypetagPtr = _lookup<
      ffi.NativeFunction<
          SQRESULT Function(ffi.Pointer<HSQOBJECT>,
              ffi.Pointer<SQUserPointer>)>>('sq_getobjtypetag');
  late final _sq_getobjtypetag = _sq_getobjtypetagPtr.asFunction<
      int Function(ffi.Pointer<HSQOBJECT>, ffi.Pointer<SQUserPointer>)>();

  int sq_getvmrefcount(
    HSQUIRRELVM v,
    ffi.Pointer<HSQOBJECT> po,
  ) {
    return _sq_getvmrefcount(
      v,
      po,
    );
  }

  late final _sq_getvmrefcountPtr = _lookup<
      ffi.NativeFunction<
          SQUnsignedInteger Function(
              HSQUIRRELVM, ffi.Pointer<HSQOBJECT>)>>('sq_getvmrefcount');
  late final _sq_getvmrefcount = _sq_getvmrefcountPtr
      .asFunction<int Function(HSQUIRRELVM, ffi.Pointer<HSQOBJECT>)>();

  /// GC
  int sq_collectgarbage(
    HSQUIRRELVM v,
  ) {
    return _sq_collectgarbage(
      v,
    );
  }

  late final _sq_collectgarbagePtr =
      _lookup<ffi.NativeFunction<SQInteger Function(HSQUIRRELVM)>>(
          'sq_collectgarbage');
  late final _sq_collectgarbage =
      _sq_collectgarbagePtr.asFunction<int Function(HSQUIRRELVM)>();

  int sq_resurrectunreachable(
    HSQUIRRELVM v,
  ) {
    return _sq_resurrectunreachable(
      v,
    );
  }

  late final _sq_resurrectunreachablePtr =
      _lookup<ffi.NativeFunction<SQRESULT Function(HSQUIRRELVM)>>(
          'sq_resurrectunreachable');
  late final _sq_resurrectunreachable =
      _sq_resurrectunreachablePtr.asFunction<int Function(HSQUIRRELVM)>();

  /// serialization
  int sq_writeclosure(
    HSQUIRRELVM vm,
    SQWRITEFUNC writef,
    SQUserPointer up,
  ) {
    return _sq_writeclosure(
      vm,
      writef,
      up,
    );
  }

  late final _sq_writeclosurePtr = _lookup<
      ffi.NativeFunction<
          SQRESULT Function(
              HSQUIRRELVM, SQWRITEFUNC, SQUserPointer)>>('sq_writeclosure');
  late final _sq_writeclosure = _sq_writeclosurePtr
      .asFunction<int Function(HSQUIRRELVM, SQWRITEFUNC, SQUserPointer)>();

  int sq_readclosure(
    HSQUIRRELVM vm,
    SQREADFUNC readf,
    SQUserPointer up,
  ) {
    return _sq_readclosure(
      vm,
      readf,
      up,
    );
  }

  late final _sq_readclosurePtr = _lookup<
      ffi.NativeFunction<
          SQRESULT Function(
              HSQUIRRELVM, SQREADFUNC, SQUserPointer)>>('sq_readclosure');
  late final _sq_readclosure = _sq_readclosurePtr
      .asFunction<int Function(HSQUIRRELVM, SQREADFUNC, SQUserPointer)>();

  /// mem allocation
  ffi.Pointer<ffi.Void> sq_malloc(
    int size,
  ) {
    return _sq_malloc(
      size,
    );
  }

  late final _sq_mallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(SQUnsignedInteger)>>('sq_malloc');
  late final _sq_malloc =
      _sq_mallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> sq_realloc(
    ffi.Pointer<ffi.Void> p,
    int oldsize,
    int newsize,
  ) {
    return _sq_realloc(
      p,
      oldsize,
      newsize,
    );
  }

  late final _sq_reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              SQUnsignedInteger, SQUnsignedInteger)>>('sq_realloc');
  late final _sq_realloc = _sq_reallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  void sq_free(
    ffi.Pointer<ffi.Void> p,
    int size,
  ) {
    return _sq_free(
      p,
      size,
    );
  }

  late final _sq_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, SQUnsignedInteger)>>('sq_free');
  late final _sq_free =
      _sq_freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  /// debug
  int sq_stackinfos(
    HSQUIRRELVM v,
    int level,
    ffi.Pointer<SQStackInfos> si,
  ) {
    return _sq_stackinfos(
      v,
      level,
      si,
    );
  }

  late final _sq_stackinfosPtr = _lookup<
      ffi.NativeFunction<
          SQRESULT Function(HSQUIRRELVM, SQInteger,
              ffi.Pointer<SQStackInfos>)>>('sq_stackinfos');
  late final _sq_stackinfos = _sq_stackinfosPtr
      .asFunction<int Function(HSQUIRRELVM, int, ffi.Pointer<SQStackInfos>)>();

  void sq_setdebughook(
    HSQUIRRELVM v,
  ) {
    return _sq_setdebughook(
      v,
    );
  }

  late final _sq_setdebughookPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HSQUIRRELVM)>>(
          'sq_setdebughook');
  late final _sq_setdebughook =
      _sq_setdebughookPtr.asFunction<void Function(HSQUIRRELVM)>();

  void sq_setnativedebughook(
    HSQUIRRELVM v,
    SQDEBUGHOOK hook,
  ) {
    return _sq_setnativedebughook(
      v,
      hook,
    );
  }

  late final _sq_setnativedebughookPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HSQUIRRELVM, SQDEBUGHOOK)>>(
          'sq_setnativedebughook');
  late final _sq_setnativedebughook = _sq_setnativedebughookPtr
      .asFunction<void Function(HSQUIRRELVM, SQDEBUGHOOK)>();
}

final class SQVM extends ffi.Opaque {}

final class SQTable extends ffi.Opaque {}

final class SQArray extends ffi.Opaque {}

final class SQString extends ffi.Opaque {}

final class SQClosure extends ffi.Opaque {}

final class SQGenerator extends ffi.Opaque {}

final class SQNativeClosure extends ffi.Opaque {}

final class SQUserData extends ffi.Opaque {}

final class SQFunctionProto extends ffi.Opaque {}

final class SQRefCounted extends ffi.Opaque {}

final class SQClass extends ffi.Opaque {}

final class SQInstance extends ffi.Opaque {}

final class SQDelegable extends ffi.Opaque {}

final class SQOuter extends ffi.Opaque {}

enum tagSQObjectType {
  OT_NULL(16777217),
  OT_INTEGER(83886082),
  OT_FLOAT(83886084),
  OT_BOOL(16777224),
  OT_STRING(134217744),
  OT_TABLE(167772192),
  OT_ARRAY(134217792),
  OT_USERDATA(167772288),
  OT_CLOSURE(134217984),
  OT_NATIVECLOSURE(134218240),
  OT_GENERATOR(134218752),
  OT_USERPOINTER(2048),
  OT_THREAD(134221824),

  /// internal usage only
  OT_FUNCPROTO(134225920),
  OT_CLASS(134234112),
  OT_INSTANCE(167804928),
  OT_WEAKREF(134283264),

  /// internal usage only
  OT_OUTER(134348800);

  final int value;
  const tagSQObjectType(this.value);

  static tagSQObjectType fromValue(int value) => switch (value) {
        16777217 => OT_NULL,
        83886082 => OT_INTEGER,
        83886084 => OT_FLOAT,
        16777224 => OT_BOOL,
        134217744 => OT_STRING,
        167772192 => OT_TABLE,
        134217792 => OT_ARRAY,
        167772288 => OT_USERDATA,
        134217984 => OT_CLOSURE,
        134218240 => OT_NATIVECLOSURE,
        134218752 => OT_GENERATOR,
        2048 => OT_USERPOINTER,
        134221824 => OT_THREAD,
        134225920 => OT_FUNCPROTO,
        134234112 => OT_CLASS,
        167804928 => OT_INSTANCE,
        134283264 => OT_WEAKREF,
        134348800 => OT_OUTER,
        _ => throw ArgumentError("Unknown value for tagSQObjectType: $value"),
      };
}

typedef SQInteger = ffi.LongLong;
typedef DartSQInteger = int;
typedef SQFloat = ffi.Float;
typedef DartSQFloat = double;
typedef SQUserPointer = ffi.Pointer<ffi.Void>;

final class SQWeakRef extends ffi.Opaque {}

typedef SQRawObjectVal = ffi.LongLong;
typedef DartSQRawObjectVal = int;

final class tagSQObjectValue extends ffi.Union {
  external ffi.Pointer<SQTable> pTable;

  external ffi.Pointer<SQArray> pArray;

  external ffi.Pointer<SQClosure> pClosure;

  external ffi.Pointer<SQOuter> pOuter;

  external ffi.Pointer<SQGenerator> pGenerator;

  external ffi.Pointer<SQNativeClosure> pNativeClosure;

  external ffi.Pointer<SQString> pString;

  external ffi.Pointer<SQUserData> pUserData;

  @SQInteger()
  external int nInteger;

  @SQFloat()
  external double fFloat;

  external SQUserPointer pUserPointer;

  external ffi.Pointer<SQFunctionProto> pFunctionProto;

  external ffi.Pointer<SQRefCounted> pRefCounted;

  external ffi.Pointer<SQDelegable> pDelegable;

  external ffi.Pointer<SQVM> pThread;

  external ffi.Pointer<SQClass> pClass;

  external ffi.Pointer<SQInstance> pInstance;

  external ffi.Pointer<SQWeakRef> pWeakRef;

  @SQRawObjectVal()
  external int raw;
}

typedef SQObjectValue = tagSQObjectValue;

final class tagSQObject extends ffi.Struct {
  @ffi.UnsignedInt()
  external int _typeAsInt;

  tagSQObjectType get _type => tagSQObjectType.fromValue(_typeAsInt);

  external SQObjectValue _unVal;
}

typedef SQObject = tagSQObject;
typedef SQUnsignedInteger = ffi.UnsignedLongLong;
typedef DartSQUnsignedInteger = int;
typedef SQBool = SQUnsignedInteger;

final class tagSQMemberHandle extends ffi.Struct {
  @SQBool()
  external int _static;

  @SQInteger()
  external int _index;
}

typedef SQMemberHandle = tagSQMemberHandle;
typedef SQChar = ffi.Char;
typedef DartSQChar = int;

final class tagSQStackInfos extends ffi.Struct {
  external ffi.Pointer<SQChar> funcname;

  external ffi.Pointer<SQChar> source;

  @SQInteger()
  external int line;
}

typedef SQStackInfos = tagSQStackInfos;
typedef HSQUIRRELVM = ffi.Pointer<SQVM>;
typedef HSQOBJECT = SQObject;
typedef HSQMEMBERHANDLE = SQMemberHandle;
typedef SQFUNCTIONFunction = SQInteger Function(HSQUIRRELVM);
typedef DartSQFUNCTIONFunction = DartSQInteger Function(HSQUIRRELVM);
typedef SQFUNCTION = ffi.Pointer<ffi.NativeFunction<SQFUNCTIONFunction>>;
typedef SQRELEASEHOOKFunction = SQInteger Function(SQUserPointer, SQInteger);
typedef DartSQRELEASEHOOKFunction = DartSQInteger Function(
    SQUserPointer, DartSQInteger);
typedef SQRELEASEHOOK = ffi.Pointer<ffi.NativeFunction<SQRELEASEHOOKFunction>>;
typedef SQCOMPILERERRORFunction = ffi.Void Function(HSQUIRRELVM,
    ffi.Pointer<SQChar>, ffi.Pointer<SQChar>, SQInteger, SQInteger);
typedef DartSQCOMPILERERRORFunction = void Function(HSQUIRRELVM,
    ffi.Pointer<SQChar>, ffi.Pointer<SQChar>, DartSQInteger, DartSQInteger);
typedef SQCOMPILERERROR
    = ffi.Pointer<ffi.NativeFunction<SQCOMPILERERRORFunction>>;
typedef SQPRINTFUNCTIONFunction = ffi.Void Function(
    HSQUIRRELVM, ffi.Pointer<SQChar>);
typedef DartSQPRINTFUNCTIONFunction = void Function(
    HSQUIRRELVM, ffi.Pointer<SQChar>);
typedef SQPRINTFUNCTION
    = ffi.Pointer<ffi.NativeFunction<SQPRINTFUNCTIONFunction>>;
typedef SQDEBUGHOOKFunction = ffi.Void Function(HSQUIRRELVM, SQInteger,
    ffi.Pointer<SQChar>, SQInteger, ffi.Pointer<SQChar>);
typedef DartSQDEBUGHOOKFunction = void Function(HSQUIRRELVM, DartSQInteger,
    ffi.Pointer<SQChar>, DartSQInteger, ffi.Pointer<SQChar>);
typedef SQDEBUGHOOK = ffi.Pointer<ffi.NativeFunction<SQDEBUGHOOKFunction>>;
typedef SQWRITEFUNCFunction = SQInteger Function(
    SQUserPointer, SQUserPointer, SQInteger);
typedef DartSQWRITEFUNCFunction = DartSQInteger Function(
    SQUserPointer, SQUserPointer, DartSQInteger);
typedef SQWRITEFUNC = ffi.Pointer<ffi.NativeFunction<SQWRITEFUNCFunction>>;
typedef SQREADFUNCFunction = SQInteger Function(
    SQUserPointer, SQUserPointer, SQInteger);
typedef DartSQREADFUNCFunction = DartSQInteger Function(
    SQUserPointer, SQUserPointer, DartSQInteger);
typedef SQREADFUNC = ffi.Pointer<ffi.NativeFunction<SQREADFUNCFunction>>;
typedef SQLEXREADFUNCFunction = SQInteger Function(SQUserPointer);
typedef DartSQLEXREADFUNCFunction = DartSQInteger Function(SQUserPointer);
typedef SQLEXREADFUNC = ffi.Pointer<ffi.NativeFunction<SQLEXREADFUNCFunction>>;

final class tagSQRegFunction extends ffi.Struct {
  external ffi.Pointer<SQChar> name;

  external SQFUNCTION f;

  @SQInteger()
  external int nparamscheck;

  external ffi.Pointer<SQChar> typemask;
}

typedef SQRegFunction = tagSQRegFunction;

final class tagSQFunctionInfo extends ffi.Struct {
  external SQUserPointer funcid;

  external ffi.Pointer<SQChar> name;

  external ffi.Pointer<SQChar> source;

  @SQInteger()
  external int line;
}

typedef SQFunctionInfo = tagSQFunctionInfo;
typedef SQRESULT = SQInteger;
typedef SQHash = ffi.UnsignedLongLong;
typedef DartSQHash = int;

const int SQTrue = 1;

const int SQFalse = 0;

const String SQUIRREL_VERSION = 'Squirrel 3.1 stable';

const String SQUIRREL_COPYRIGHT = 'Copyright (C) 2003-2016 Alberto Demichelis';

const String SQUIRREL_AUTHOR = 'Alberto Demichelis';

const int SQUIRREL_VERSION_NUMBER = 310;

const int SQ_VMSTATE_IDLE = 0;

const int SQ_VMSTATE_RUNNING = 1;

const int SQ_VMSTATE_SUSPENDED = 2;

const int SQUIRREL_EOB = 0;

const int SQ_BYTECODE_STREAM_TAG = 64250;

const int SQOBJECT_REF_COUNTED = 134217728;

const int SQOBJECT_NUMERIC = 67108864;

const int SQOBJECT_DELEGABLE = 33554432;

const int SQOBJECT_CANBEFALSE = 16777216;

const int SQ_MATCHTYPEMASKSTRING = -99999;

const int _RT_MASK = 16777215;

const int _RT_NULL = 1;

const int _RT_INTEGER = 2;

const int _RT_FLOAT = 4;

const int _RT_BOOL = 8;

const int _RT_STRING = 16;

const int _RT_TABLE = 32;

const int _RT_ARRAY = 64;

const int _RT_USERDATA = 128;

const int _RT_CLOSURE = 256;

const int _RT_NATIVECLOSURE = 512;

const int _RT_GENERATOR = 1024;

const int _RT_USERPOINTER = 2048;

const int _RT_THREAD = 4096;

const int _RT_FUNCPROTO = 8192;

const int _RT_CLASS = 16384;

const int _RT_INSTANCE = 32768;

const int _RT_WEAKREF = 65536;

const int _RT_OUTER = 131072;

const int SQ_OK = 0;

const int SQ_ERROR = -1;
