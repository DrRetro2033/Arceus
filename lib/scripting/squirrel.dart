import 'dart:ffi';
import 'dart:io' show Platform;
import 'package:arceus/arceus.dart';
import 'package:ffi/ffi.dart' as ffi;
import 'package:ffi/ffi.dart';
import 'package:talker/talker.dart';
import 'package:arceus/extensions.dart';

import 'package:arceus/scripting/squirrel_bindings_generated.dart';

DynamicLibrary _getDylib() {
  if (Arceus.isDev) {
    return DynamicLibrary.open(
        "${const String.fromEnvironment('LIBRARY_PATH', defaultValue: 'C://Repos/arceus/')}/squirrel.dll");
  }
  if (Platform.isMacOS) {
    throw Exception("MacOS is not supported yet.");
  } else if (Platform.isLinux) {
    return DynamicLibrary.open("${Arceus.getLibraryPath()}/lib/squirrel.so");
  } else if (Platform.isWindows) {
    return DynamicLibrary.open("${Arceus.getLibraryPath()}/squirrel.dll");
  }
  throw Exception("Unsupported platform.");
}

Pointer<NativeFunction<Void Function(Pointer<SQVM>, Pointer<Char>)>>
    printSquirl = Pointer.fromFunction(_printSquirl);
void _printSquirl(Pointer<SQVM> vm, Pointer<Char> s) {
  print(s.toDartString());
  return;
}

Pointer<
        NativeFunction<
            Void Function(Pointer<SQVM>, Pointer<Char>, Pointer<Char>, LongLong,
                LongLong)>> printSquirlCompileError =
    Pointer.fromFunction(_printSquirlError);

void _printSquirlError(Pointer<SQVM> vm, Pointer<Char> s, Pointer<Char> file,
    int line, int column) {
  throw Exception("${s.toDartString()} ${file.toDartString()}:$line:$column");
}

class Squirrel {
  /// # `static` Talker talker
  /// ## The logger for the Squirrel instance.
  static Talker talker = Talker();

  /// # `late` SquirrelBindings bindings
  /// ## The bindings for the Squirrel instance.
  /// Generated by ffigen.
  static late SquirrelBindings bindings;

  /// # `static` bool isInitialized
  /// ## A flag to check if Squirrel has been initialized and can be used.
  static bool isInitialized = false;

  /// # `static` void init(String pathToLibraries)
  /// ## Initializes the Squirrel libraries.
  static loadSquirrelLibs(String pathToLibraries) {
    bindings = SquirrelBindings(_getDylib());
    isInitialized = true;
  }

  late Pointer<SQVM> _vmpointer;

  final String _code;

  Squirrel(this._code) {
    if (!isInitialized) {
      throw Exception("Squirrel is not initialized.");
    }
    _vmpointer = _compile(_code);
  }

  /// # `static` Pointer<SQVM> start(String filename, String code)
  /// ## Compiles code and starts the Squirrel instance.
  Pointer<SQVM> _compile(String code) {
    if (!isInitialized) {
      throw Exception("Squirrel is not initialized.");
    }
    final vm = bindings.sq_open(1024);
    bindings.sq_setprintfunc(vm, printSquirl, printSquirl);
    bindings.sq_setcompilererrorhandler(vm, printSquirlCompileError);
    code = _addExports(code);
    final pointer = code.toCharPointer();
    successful(
        bindings.sq_compilebuffer(
            vm, pointer, code.length, "run.nut".toCharPointer(), SQTrue),
        pointer: vm);
    malloc.free(pointer);
    bindings.sq_pushroottable(vm);
    successful(bindings.sq_call(vm, 1, SQFalse, SQTrue), pointer: vm);
    bindings.sq_collectgarbage(vm);
    bindings.sq_pop(vm, 1);
    return vm;
  }

  static String _addExports(String code) {
    RegExp regExp = RegExp(
        r'class\s(\w*)\s?(?:extends (\w*))?\s?<\s?\/\s?export\s?=\s?\[((?:\s?"?(?:\w+)"?\s?,?)+)\]\s?\/\s?>');
    String addCode = """
\n
function __export__(obj) {
  return obj.export();
}
""";
    List<String> parsedClasses = [];
    while (regExp.hasMatch(code)) {
      List<Match> matches = regExp
          .allMatches(code)
          .toList()
          .where((x) => !parsedClasses.contains(x.group(1)))
          .toList();
      if (matches.isEmpty) {
        break;
      }
      Match m = matches.first;
      String className = m.group(1)!;
      String? superName = m.group(2);
      String exportsStr = m.group(3)!;
      List<String> exports = exportsStr
          .split(",")
          .map((e) => e.trim().replaceAll('"', ''))
          .toList();
      parsedClasses.add(className);
      addCode += """
\n
function $className::export() {
  return {
    ${exports.map((e) => "$e = this.$e").join(",\n    ")}
  };
}""";
      code = code.replaceRange(
          m.start,
          m.end,
          "class $className${superName != null ? " extends $superName" : ""} </ export = [${exports.map(
                (e) => '"$e"',
              ).join(", ")}] />");
    }
    return code + addCode;
  }

  /// # `static` void dispose(Pointer<SQVM> vm)
  /// ## Closes the Squirrel instance.
  void dispose() {
    bindings.sq_close(_vmpointer);
  }

  /// # `void` _createAPI(List<SquirrelFunction> apiFunctions)
  /// ## Creates the API for the Squirrel instance.
  /// It takes a list of [SquirrelFunction] objects and adds them to the global scope of the Squirrel instance.
  void createAPI(List<SquirrelFunction> apiFunctions) {
    bindings.sq_pushroottable(_vmpointer);
    bindings.sq_newtable(_vmpointer);
    for (SquirrelFunction func in apiFunctions) {
      func.setInstance(this);
      bindings.sq_pushstring(_vmpointer, func.name.toCharPointer(), -1);
      bindings.sq_newclosure(
          _vmpointer,
          NativeCallable<LongLong Function(Pointer<SQVM> ctx)>.isolateLocal(
                  func.call,
                  exceptionalReturn: 0)
              .nativeFunction,
          0);
      bindings.sq_newslot(_vmpointer, -3, SQFalse);
    }
    bindings.sq_pushstring(_vmpointer, "arceus".toCharPointer(), -1);
    bindings.sq_push(_vmpointer, -2);
    bindings.sq_remove(_vmpointer, -3);
    bindings.sq_newslot(_vmpointer, -3, SQFalse);
    bindings.sq_pop(_vmpointer, 1);
  }

  /// # `static` void successful(Pointer<SQVM> vm, int result)
  /// ## Throws an exception if the result is not 0.
  /// It will also print the stack of the Squirrel instance.
  bool successful(int result, {Pointer<SQVM>? pointer}) {
    final vm = pointer ?? _vmpointer;
    if (result != 0) {
      bindings.sq_getlasterror(vm);
      final error = getValueFromStack(pointer: vm);
      throw Exception("$error \n ${getStackForPrint(pointer: vm)} \n");
    }
    return true;
  }

  /// # `static` void getStack(Pointer<SQVM> vm)
  /// ## Gets the stack of the Squirrel instance.
  List<String> getStack({Pointer<SQVM>? pointer}) {
    final vm = pointer ?? _vmpointer;
    List<String> stack = [];
    int i = bindings.sq_gettop(vm);
    while (i > 0) {
      bindings.sq_tostring(vm, i);
      final p = ffi.calloc<Pointer<Char>>();
      bindings.sq_getstring(vm, -1, p);
      stack.add(p.value.toDartString());
      ffi.calloc.free(p);
      bindings.sq_pop(vm, 1);
      i--;
    }
    return stack;
  }

  String getStackForPrint({Pointer<SQVM>? pointer}) {
    final vm = pointer ?? _vmpointer;
    final stack = getStack(pointer: vm);
    return stack.join("\n");
  }

  /// # `static` dynamic call(String functionName, [List<dynamic> args = const []])
  /// ## Calls a function in the Squirrel instance.
  /// Will return the return value of the function, if any.
  dynamic call(String functionName, {List<dynamic> args = const []}) {
    bindings.sq_pushroottable(_vmpointer);
    bindings.sq_pushstring(
        _vmpointer, functionName.toCharPointer(), functionName.length);
    bindings.sq_get(_vmpointer, -2);
    bindings.sq_pushroottable(_vmpointer);
    for (dynamic arg in args) {
      pushToStack(arg);
    }
    successful(bindings.sq_call(_vmpointer, args.length + 1, SQTrue,
        SQTrue)); // Calls and checks if the call was successful.
    final returnValue = getValueFromStack(); // Returns the return value.
    bindings.sq_pop(_vmpointer, 2); // Pops the function and the root table.
    // malloc.free(vm);
    return returnValue;
  }

  dynamic getValueFromStack(
      {Pointer<SQVM>? pointer,
      tagSQObjectType? expectedType,
      dynamic defaultValue,
      int index = -1,
      bool noPop = false}) {
    final vm = pointer ?? _vmpointer;
    final result = bindings.sq_gettype(vm, index);
    dynamic value;
    if (expectedType != null && result.index != expectedType.index) {
      if (defaultValue != null) {
        return defaultValue;
      }
      throw Exception(
          """Expected type $expectedType but got $result. Squirrel Stack: 
          ${getStackForPrint()}""");
    } else {
      // print("Type: $result");
    }

    if (result == tagSQObjectType.OT_STRING) {
      final p = ffi.calloc<Pointer<Char>>();
      try {
        bindings.sq_getstring(
            vm, index, p); // pass along the pointer to get the value.
        value = p.value.toDartString();
      } finally {
        ffi.calloc.free(p); // free memory
      }
    } else if (result == tagSQObjectType.OT_INTEGER) {
      final p = ffi.calloc<LongLong>();
      try {
        bindings.sq_getinteger(vm, index, p);
        value = p.value;
      } finally {
        ffi.calloc.free(p);
      }
    } else if (result == tagSQObjectType.OT_FLOAT) {
      final p = ffi.calloc<Float>();
      try {
        bindings.sq_getfloat(vm, index, p);
        value = p.value;
      } finally {
        ffi.calloc.free(p);
      }
    } else if (result == tagSQObjectType.OT_BOOL) {
      final p = ffi.calloc<UnsignedLongLong>();
      try {
        bindings.sq_getbool(vm, index, p);
        value = p.value == 1 ? true : false;
      } finally {
        ffi.calloc.free(p);
      }
    } else if (result == tagSQObjectType.OT_ARRAY) {
      bindings.sq_pushnull(vm);
      value = [];
      while (bindings.sq_next(vm, -2) == 0) {
        (value as List).add(getValueFromStack(index: -1, noPop: true));
        bindings.sq_pop(vm, 1);
      }
    } else if (result == tagSQObjectType.OT_TABLE) {
      bindings.sq_pushnull(vm);
      value = {};
      while (bindings.sq_next(vm, -2) == 0) {
        // print("Stack \n${getStackForPrint(vm)}");
        (value as Map).putIfAbsent(getValueFromStack(index: -2, noPop: true),
            () => getValueFromStack(index: -1, noPop: true));
        bindings.sq_pop(vm, 2);
      }
      if (bindings.sq_gettype(vm, -1) != tagSQObjectType.OT_TABLE) {
        bindings.sq_pop(vm, 1);
      }
    } else if (result == tagSQObjectType.OT_INSTANCE) {
      bindings.sq_pushroottable(vm);
      bindings.sq_pushstring(vm, "__export__".toCharPointer(), -1);
      bindings.sq_get(vm, -2);
      bindings.sq_pushroottable(vm);
      bindings.sq_push(vm, -4);
      bindings.sq_remove(vm, -4);
      successful(bindings.sq_call(vm, 2, SQTrue, SQTrue));
      value = getValueFromStack(index: -1, noPop: true);
      bindings.sq_pop(vm, 2);
    } else if (result == tagSQObjectType.OT_NULL) {
      value = null;
    } else {
      // print("Unknown type: $result");
      value = null;
    }

    if (!noPop) {
      bindings.sq_pop(vm, 1);
    }
    return value;
  }

  void pushToStack(dynamic value, {Pointer<SQVM>? pointer}) {
    final vm = pointer ?? _vmpointer;
    if (value is String) {
      bindings.sq_pushstring(vm, value.toCharPointer(), -1);
    } else if (value is int) {
      bindings.sq_pushinteger(vm, value);
    } else if (value is double) {
      bindings.sq_pushfloat(vm, value);
    } else if (value is bool) {
      bindings.sq_pushbool(vm, value ? 1 : 0);
    } else if (value is List<dynamic>) {
      bindings.sq_newarray(vm, 0);
      for (int i = 0; i < value.length; i++) {
        pushToStack(value[i]);
        if (bindings.sq_arrayappend(vm, -2) == SQ_ERROR) {
          bindings.sq_pop(vm, 1);
          break;
        }
      }
    } else {
      bindings.sq_pushnull(vm);
    }
  }
}

/// # `void` SquirrelFunction(String name, Map<String, dynamic> arguments, Function(Pointer<SQVM> ctx, Map<String, dynamic> params) call)
/// ## A function that can be called from inside a Duktape instance.
/// It takes a name, a map of arguments, and a function to call.
class SquirrelFunction {
  final String name;

  /// # `Map<String, dynamic>`
  /// ## The arguments of the function.
  /// Only use either tagSQObjectType, or records with the format of (tagSQObjectType, defaultValue) for optional arguments.
  /// Example: (tagSQObjectType.OT_INTEGER, 0)
  /// Optional arguments must be at the end of the list, to avoid skipping required arguments.
  final Map<String, dynamic> arguments;

  Squirrel? _squirrel;

  void setInstance(Squirrel squirrel) {
    _squirrel = squirrel;
  }

  final dynamic Function(Map<String, dynamic> params) _call;

  SquirrelFunction(
    this.name,
    this.arguments,
    this._call,
  );

  int get nargs => arguments.entries.length;

  Map<String, dynamic> _getParams(Squirrel squirrel) {
    Map<String, dynamic> params = {};
    // print(arguments.keys.toList().reversed);
    for (String key in arguments.keys.toList().reversed) {
      switch (arguments[key]) {
        case tagSQObjectType.OT_STRING:
          params[key] = squirrel.getValueFromStack(
              expectedType: tagSQObjectType.OT_STRING);
          break;
        case tagSQObjectType.OT_INTEGER:
          params[key] = squirrel.getValueFromStack(
              expectedType: tagSQObjectType.OT_INTEGER);
          break;
        case tagSQObjectType.OT_FLOAT:
          params[key] = squirrel.getValueFromStack(
              expectedType: tagSQObjectType.OT_FLOAT);
          break;
        case tagSQObjectType.OT_BOOL:
          params[key] =
              squirrel.getValueFromStack(expectedType: tagSQObjectType.OT_BOOL);
          break;
        default:
          if (arguments[key] is Map) {
            params[key] = arguments[key].cast<dynamic, dynamic>();
            Map<dynamic, dynamic> table = squirrel.getValueFromStack(
              expectedType: tagSQObjectType.OT_TABLE,
              defaultValue: arguments[key],
            );
            params[key].addAll(table);
          } else if (arguments[key] is (tagSQObjectType, dynamic)) {
            try {
              params[key] = squirrel.getValueFromStack(
                  expectedType: arguments[key].$1,
                  defaultValue: arguments[key].$2);
            } catch (e) {
              throw ('Tried to use given record ${arguments[key]} as argument. Expected record must be (tagSQObjectType, dynamic)');
            }
          }
      }
    }
    return params;
  }

  /// # `void` _returnValue(Pointer<SQVM> vm, dynamic value)
  /// ## Pushes the return value to the stack.
  /// It will also print the stack of the Squirrel instance.
  void _returnValue(Squirrel squirrel, dynamic value) {
    squirrel.pushToStack(value);
  }

  /// # `int` call(Pointer<SQVM> vm)
  /// ## Calls the _call function with the given parameters from the Squirrel instance and return its result to Squirrel.
  int call(Pointer<SQVM> vm) {
    try {
      final result = _call(_getParams(_squirrel!));
      if (result != null) {
        _returnValue(_squirrel!, result);
      }
    } catch (e) {
      print(e);
      return e.hashCode;
    }
    return 1;
  }
}
